<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZK`s Blog</title>
  
  <subtitle>zhaokui</subtitle>
  <link href="http://jkraise.top/atom.xml" rel="self"/>
  
  <link href="http://jkraise.top/"/>
  <updated>2022-07-23T05:36:14.469Z</updated>
  <id>http://jkraise.top/</id>
  
  <author>
    <name>zhaokui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node Study</title>
    <link href="http://jkraise.top/2022/07/23/nodeStudy/"/>
    <id>http://jkraise.top/2022/07/23/nodeStudy/</id>
    <published>2022-07-23T05:35:43.000Z</published>
    <updated>2022-07-23T05:36:14.469Z</updated>
    
    <content type="html"><![CDATA[<p>vue事件函数</p><a id="more"></a><h1 id="node-Study"><a href="#node-Study" class="headerlink" title="node Study"></a>node Study</h1><ul><li><p><code>__dirname</code> 当前js文件所在绝对路径</p></li><li><p><code>path</code>模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);  <span class="comment">// 导入path模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = path.join(__dirname, <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>); <span class="comment">// 拼接字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(url) <span class="comment">// E:\NodeDay01\a\b</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="http-开启服务器"><a href="#http-开启服务器" class="headerlink" title="http    开启服务器"></a>http    开启服务器</h2><p> <strong>art-template 是一个简约、超快的模板引擎</strong> </p><ul><li><pre><code>// 1. 引入模块var fs = require(&#39;fs&#39;)var template =require(&#39;art-template&#39;)const http = require(&#39;http&#39;)// 创建服务器对象var server = http.createServer();// 开启服务，并设置监听端口server.listen(3000,()=&gt;&#123;    console.log(&#39;the server is running at http://127.0.0.1:3000&#39;);&#125;)// 请求事件server.on(&#39;request&#39;,(req,res)=&gt;&#123;    // 获取url    var url = req.url;     if(url==&#39;/&#39;)&#123;    //4.1 读取数据    fs.readFile(__dirname+&quot;/views/index.html&quot;,&#39;utf-8&#39;,(err,data)=&gt;&#123;      if(err) return console.log(err.message);      var render = template.compile(data);      // var str = render(&#123;&#125;);      var str = render(&#123;        name:&#39;tom&#39;,        age:20,        hobby:[&#39;抽烟&#39;,&#39;喝酒&#39;,&#39;烫头&#39;]      &#125;);      res.end(str);    &#125;)  &#125;else &#123;    res.end(&#39;404&#39;)  &#125;&#125;)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> template.render(source,data) </span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line"></span><br><span class="line">var str &#x3D; template.render(data,obj);</span><br></pre></td></tr></table></figure> template(filename,data) <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">      name: &#39;tom&#39;,</span><br><span class="line">      age: 20,</span><br><span class="line">      hobby: [&#39;抽烟&#39;, &#39;喝酒&#39;, &#39;烫头&#39;,&#39;撩妹&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">var str &#x3D; template(__dirname+&#39;&#x2F;views&#x2F;index.html&#39;,obj)</span><br></pre></td></tr></table></figure>## Express 模块1. 安装   1. `npm i express`2. 使用   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line">var ejs &#x3D; require(&#39;ejs&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建服务器对象</span><br><span class="line">var app &#x3D; express();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动服务，监听端口</span><br><span class="line">app.listen(3000,()&#x3D;&gt;&#123;</span><br><span class="line">  console.log(&#39;express server is running at http:&#x2F;&#x2F;127.0.0.1:3000&#39;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4. 注册中间件</span><br><span class="line">&#x2F;&#x2F; 设置一个指定的模板引擎ejs，其中第一个参数的值是固定写法.</span><br><span class="line">app.set(&#39;view engine&#39;,&#39;ejs&#39;);</span><br><span class="line">&#x2F;&#x2F; 第二个app.set是指定要渲染的页面的来源,第一个参数也是一个固定的写法,表示是要渲染的是静态页面</span><br><span class="line">app.set(&#39;views&#39;,&#39;.&#x2F;views&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; get 请求</span><br><span class="line">app.get(&#39;&#x2F;&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; res.send(&#39;这是主页面的内容...&#39;)</span><br><span class="line">  res.render(&#39;index&#39;,&#123;name:&#39;tom&#39;,age:20,gender:&#39;男&#39;,hobby:[&#39;吃饭&#39;,&#39;睡觉&#39;,&#39;打豆豆&#39;]&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; post请求</span><br><span class="line">app.post(&#39;&#x2F;&#39;,(req, res) &#x3D;&gt; &#123;</span><br><span class="line">  res.send(&#39;这是一个post请求啊...&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="express-Router创建路由"><a href="#express-Router创建路由" class="headerlink" title="express.Router创建路由"></a>express.Router创建路由</h3><p> <strong>app.route()</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.route(&#39;&#x2F;book&#39;)</span><br><span class="line">  .get((req,res)&#x3D;&gt;&#123;</span><br><span class="line">    res.send(&#39;Get a random book&#39;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .post((req,res)&#x3D;&gt;&#123;</span><br><span class="line">    res.send(&#39;Add a book&#39;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .put((req,res)&#x3D;&gt;&#123;</span><br><span class="line">    res.send(&#39;Updata the book&#39;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue事件函数&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://jkraise.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="node" scheme="http://jkraise.top/categories/%E5%89%8D%E7%AB%AF/node/"/>
    
    
    <category term="node" scheme="http://jkraise.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ Study</title>
    <link href="http://jkraise.top/2022/07/23/RabbitMQ/"/>
    <id>http://jkraise.top/2022/07/23/RabbitMQ/</id>
    <published>2022-07-23T05:33:22.000Z</published>
    <updated>2022-07-23T05:38:14.800Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ介绍<br>消息队列概念</p><a id="more"></a><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p><code>RabbitMQ</code> 即一个消息队列，主要是用来实现应用程序的异步和解耦，同时也能起到消息缓冲，消息分发的作用。</p><p>消息中间件在互联网公司的使用中越来越多，刚才还看到新闻阿里将<code>RocketMQ</code>捐献给了apache，当然了今天的主角还是讲<code>RabbitMQ</code>。消息中间件最主要的作用是解耦，中间件最标准的用法是生产者生产消息传送到队列，消费者从队列中拿取消息并处理，生产者不用关心是谁来消费，消费者不用关心谁在生产消息，从而达到解耦的目的。在分布式的系统中，消息队列也会被用在很多其它的方面，比如：分布式事务的支持，<code>RPC</code>的调用等等。</p><h2 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a><strong>RabbitMQ介绍</strong></h2><p><code>RabbitMQ</code>是实现<code>AMQP</code>（高级消息队列协议）的消息中间件的一种，最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。<code>RabbitMQ</code>主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p><p><code>AMQP</code>，即<code>Advanced Message Queuing Protocol，</code>高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p><p>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：<code>Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP</code>等，支持<code>AJAX</code>。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><ul><li><strong>相关概念</strong></li></ul><p>通常我们谈到队列服务, 会有三个概念： 发消息者、队列、收消息者，RabbitMQ 在这个基本概念之上, 多做了一层抽象, 在发消息者和 队列之间, 加入了交换器 (Exchange). 这样发消息者和队列就没有直接联系, 转而变成发消息者把消息给交换器, 交换器根据调度策略再把消息再给队列。</p><p><img src="RabbitMQ.assets/1636618068256.png" alt="1636618068256"></p><ul><li><ul><li>左侧 P 代表 生产者，也就是往 RabbitMQ 发消息的程序。</li><li>中间即是 RabbitMQ，<em>其中包括了 交换机 和 队列。</em></li><li>右侧 C 代表 消费者，也就是往 RabbitMQ 拿消息的程序。</li></ul></li><li><p>那么，<em>其中比较重要的概念有 4 个，分别为：虚拟主机，交换机，队列，和绑定。</em></p></li><li><ul><li><ul><li>虚拟主机：一个虚拟主机持有一组交换机、队列和绑定。为什么需要多个虚拟主机呢？很简单，RabbitMQ当中，<em>用户只能在虚拟主机的粒度进行权限控制。</em> 因此，如果需要禁止A组访问B组的交换机/队列/绑定，必须为A和B分别创建一个虚拟主机。每一个RabbitMQ服务器都有一个默认的虚拟主机“/”。</li><li>交换机：<em>Exchange 用于转发消息，但是它不会做存储</em> ，如果没有 Queue bind 到 Exchange 的话，它会直接丢弃掉 Producer 发送过来的消息。 这里有一个比较重要的概念：路由键 。消息到交换机的时候，交互机会转发到对应的队列中，那么究竟转发到哪个队列，就要根据该路由键。</li><li>绑定：也就是交换机需要和队列相绑定，这其中如上图所示，是多对多的关系。</li></ul></li></ul></li><li><ul><li><strong>交换机(Exchange)</strong></li></ul></li><li><p>交换机的功能主要是接收消息并且转发到绑定的队列，交换机不存储消息，在启用ack模式后，交换机找不到队列会返回错误。交换机有四种类型：Direct, topic, Headers and Fanout</p></li><li><ul><li><ul><li>Direct：direct 类型的行为是”先匹配, 再投送”. 即在绑定时设定一个 <strong>routing_key</strong>, 消息的 <strong>routing_key</strong> 匹配时, 才会被交换器投送到绑定的队列中去.</li><li>Topic：按规则转发消息（最灵活）</li><li>Headers：设置header attribute参数类型的交换机</li><li>Fanout：转发消息到所有绑定队列</li></ul></li><li><p><strong>Direct Exchange</strong></p></li></ul></li><li><p>Direct Exchange是RabbitMQ默认的交换机模式，也是最简单的模式，根据key全文匹配去寻找队列。</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/25069044?refer=dreawer">完整部分参考知乎</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;RabbitMQ介绍&lt;br&gt;消息队列概念&lt;/p&gt;</summary>
    
    
    
    <category term="RabbitMQ" scheme="http://jkraise.top/categories/RabbitMQ/"/>
    
    <category term="消息队列" scheme="http://jkraise.top/categories/RabbitMQ/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="RabbitMQ" scheme="http://jkraise.top/tags/RabbitMQ/"/>
    
    <category term="消息队列" scheme="http://jkraise.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>vue事件函数</title>
    <link href="http://jkraise.top/2022/07/23/vue%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0/"/>
    <id>http://jkraise.top/2022/07/23/vue%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0/</id>
    <published>2022-07-23T05:33:22.000Z</published>
    <updated>2022-07-23T05:34:18.838Z</updated>
    
    <content type="html"><![CDATA[<p>vue事件函数</p><a id="more"></a><ul><li>事件对象 在函数只有一个参数的，可以不写<code>$evnet</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick(&#x27;阿元&#x27;, $event)&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                name: <span class="string">&quot;hello word&quot;</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                msg: &quot;<span class="tag">&lt;<span class="name">em</span>&gt;</span>jk<span class="tag">&lt;<span class="name">em</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="javascript">                active1: <span class="string">&#x27;active1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                flag: <span class="literal">true</span>,</span></span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                handleClick(name, e)&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(name,e);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><ul><li><p>事件修饰符</p></li><li><p><code>.stop</code></p></li><li><p><code>.prevent</code></p></li><li><p><code>.capture</code></p></li><li><p><code>.self</code></p></li><li><p><code>.once</code></p></li><li><p><code>.passive</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止事件冒泡 --&gt;</span><br><span class="line">&lt;a @click.stop&#x3D;&quot;handleClick&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;!-- 阻止 a标签默认事件 --&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot; @click.prevent&#x3D;&quot;handleClick&quot;&gt;百度&lt;&#x2F;a&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent&#x3D;&quot;doThat&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture&#x3D;&quot;doThis&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self&#x3D;&quot;doThat&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="line">&lt;a v-on:click.once&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure></li><li><p>键盘对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只有 ‘key’ 是 ‘enter’ 时调用 ‘vm.submit’</span><br><span class="line">@:keyup.enter&#x3D;&quot;submit&quot;</span><br></pre></td></tr></table></figure></li><li><p>双向数据绑定 <code>v-model</code></p></li><li><p>input, select ,</p></li></ul><h3 id="动效"><a href="#动效" class="headerlink" title="动效"></a>动效</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>1.利用<code>transition组件</code>包裹 <code>HTML</code></p><p>2.自定义类名通过<code>name=&quot;xxx&quot;</code></p><p>3.写css 样式</p><ul><li><p>通过<code>transition</code>组件，在自定义元素的进场(Enter)，退场(Leave)，以及过程过渡的样式，</p><ul><li>v-enter-from 元素在进场之前的样式</li><li>v-enter-active 元素在进场过程中的样式</li><li>v-enter-to 元素在进场结束时的样式</li><li>元素退场</li><li>v-leave-from 元素在退场之前的样式</li><li>v-leave-active 愿随在退场过程中的样式</li><li>v-leave-to 元素在退场结束时的样式</li></ul></li><li><h5 id="自定义类名"><a href="#自定义类名" class="headerlink" title="自定义类名"></a>自定义类名</h5><p>因为在一个项目中，可能有多个需要过渡的元素，还互相不关联，这个时候，如果都用默认的类名，会发生样式的覆盖，因此要进行 类名自定义</p><p>只要给transiton组件添加一个属性 <code>name=&quot;自定义的前缀&quot;</code></p><h5 id="条件与动态切换"><a href="#条件与动态切换" class="headerlink" title="条件与动态切换"></a>条件与动态切换</h5><p>和基本使用是一样的，<br>注意: 如果 多个元素进行动态切换，标签名还一样，就要给 每个标签添加一个属性 <code>key</code>  为了让<code>Vue</code>知道 这是两个元素，才能发生过渡效果</p><p>如果不写<code>key vue</code>在对比的时候 看到标签名一样 以为是一个元素 不会发生元素的更新 因此只对</p></li></ul><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  @:before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class="line">  @:enter&#x3D;&quot;enter&quot;</span><br><span class="line">  @:after-enter&#x3D;&quot;afterEnter&quot;</span><br><span class="line">  @:enter-cancelled&#x3D;&quot;enterCancelled&quot;</span><br><span class="line">  </span><br><span class="line">  @:before-leave&#x3D;&quot;beforeLeave&quot;</span><br><span class="line">  @:leave&#x3D;&quot;leave&quot;</span><br><span class="line">  @:after-leave&#x3D;&quot;afterLeave&quot;</span><br><span class="line">  @:leave-cancelled&#x3D;&quot;leaveCancelled&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure><p>vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">methods: &#123;</span><br><span class="line">  &#x2F;&#x2F; --------</span><br><span class="line">  &#x2F;&#x2F; 进入中</span><br><span class="line">  &#x2F;&#x2F; --------</span><br><span class="line"></span><br><span class="line">  beforeEnter: function (el) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 当与 CSS 结合使用时</span><br><span class="line">  &#x2F;&#x2F; 回调函数 done 是可选的</span><br><span class="line">  enter: function (el, done) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: function (el) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: function (el) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; --------</span><br><span class="line">  &#x2F;&#x2F; 离开时</span><br><span class="line">  &#x2F;&#x2F; --------</span><br><span class="line"></span><br><span class="line">  beforeLeave: function (el) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 当与 CSS 结合使用时</span><br><span class="line">  &#x2F;&#x2F; 回调函数 done 是可选的</span><br><span class="line">  leave: function (el, done) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: function (el) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; leaveCancelled 只用于 v-show 中</span><br><span class="line">  leaveCancelled: function (el) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h4><p>demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;list-demo&quot; class&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;add&quot;&gt;Add&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;remove&quot;&gt;Remove&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;!--- tag标签 p--&gt;</span><br><span class="line">  &lt;!--- 自定义类名 list--&gt;</span><br><span class="line">  &lt;transition-group name&#x3D;&quot;list&quot; tag&#x3D;&quot;p&quot;&gt;</span><br><span class="line">    &lt;span v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item&quot; class&#x3D;&quot;list-item&quot;&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;transition-group&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#list-demo&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [1,2,3,4,5,6,7,8,9],</span><br><span class="line">    nextNum: 10</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    randomIndex: function () &#123;</span><br><span class="line">      return Math.floor(Math.random() * this.items.length)</span><br><span class="line">    &#125;,</span><br><span class="line">    add: function () &#123;</span><br><span class="line">      this.items.splice(this.randomIndex(), 0, this.nextNum++)</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: function () &#123;</span><br><span class="line">      this.items.splice(this.randomIndex(), 1)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">css </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">.list-item &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.list-enter-active, .list-leave-active &#123;</span><br><span class="line">  transition: all 1s;</span><br><span class="line">&#125;</span><br><span class="line">.list-enter, .list-leave-to</span><br><span class="line">&#x2F;* .list-leave-active for below version 2.1.8 *&#x2F; &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translateY(30px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还可以，改变定位 <code>v-mode</code> class， 像之类名一样，可以通过<code>name</code> attribute来自定义前缀，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;lodash.js&#x2F;4.14.1&#x2F;lodash.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;flip-list-demo&quot; class&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;shuffle&quot;&gt;Shuffle&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;transition-group name&#x3D;&quot;flip-list&quot; tag&#x3D;&quot;ul&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;item in items&quot; v-bind:key&#x3D;&quot;item&quot;&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;transition-group&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#flip-list-demo&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [1,2,3,4,5,6,7,8,9]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    shuffle: function () &#123;</span><br><span class="line">      this.items &#x3D; _.shuffle(this.items)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">css </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">.flip-list-move &#123;</span><br><span class="line">  transition: transform 1s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><ul><li><p>inheritAttrs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 禁用 继承</span><br><span class="line">inheritAttrs: false,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue事件函数&lt;/p&gt;</summary>
    
    
    
    <category term="前端框架" scheme="http://jkraise.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    <category term="vue" scheme="http://jkraise.top/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/vue/"/>
    
    
    <category term="vue" scheme="http://jkraise.top/tags/vue/"/>
    
    <category term="前端框架" scheme="http://jkraise.top/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring Study</title>
    <link href="http://jkraise.top/2022/07/23/SpringStudy/"/>
    <id>http://jkraise.top/2022/07/23/SpringStudy/</id>
    <published>2022-07-23T05:33:22.000Z</published>
    <updated>2022-07-23T05:40:31.583Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#2-Spring-IoC">2 Spring IoC</a><br>[2.1 Spring IoC 的基本概念](#2.1 Spring IoC 的基本概念)<br>[2.2 Spring IoC 容器](#2.2 Spring IoC 容器)<br>[2.2.1 BeanFactory](#2.2.1 BeanFactory)<br>[2.2.2 ApplicationContext](#2.2.2 ApplicationContext)<br>[2.3 依赖注入的类型](#2.3 依赖注入的类型)<br>[2.3.1 使用构造方法注入](#2.3.1 使用构造方法注入)<br>[2.3.2 使用属性的 setter 方法注入](#2.3.2 使用属性的 setter 方法注入)<br>[3 Spring Bean](#3 Spring Bean)<br>[3.1 Bean 的配置](#3.1 Bean 的配置)<br>[3.2 Bean 的实例化](#3.2 Bean 的实例化)<br>[3.2.1 构造方法实例化](#3.2.1 构造方法实例化)<br>[3.2.2 静态工厂实例化](#3.2.2 静态工厂实例化)<br>[3.2.3 实例工厂实例化](#3.2.3 实例工厂实例化)<br>[3.3 Bean 的作用域](#3.3 Bean 的作用域)<br>[3.3.1 singleton作用域](#3.3.1 singleton作用域)<br>[3.3.2 prototype作用域](#3.3.2 prototype作用域)<br>[3.4 Bean 的生命周期](#3.4 Bean 的生命周期)<br>[3.5 Bean 的装配方式](#3.5 Bean 的装配方式)<br>[3.5.1 基于 XML 配置的装配](#3.5.1 基于 XML 配置的装配)<br>[3.5.2 基于注解的装配](#3.5.2 基于注解的装配)<br>[4 Spring AOP](#4 Spring AOP)<br>[4.1 Spring AOP 的基本概念](#4.1 Spring AOP 的基本概念)<br>[4.1.1 AOP 的概念](#4.1.1 AOP 的概念)<br>[4.1.2 AOP 的术语](#4.1.2 AOP 的术语)<br>[4.2 动态代理](#4.2 动态代理)<br>[4.2.1 JDK 动态代理](#4.2.1 JDK 动态代理)<br>[4.2.2 CGLIB](#4.2.2 CGLIB)<br>[4.3 基于代理类的 AOP 实现](#4.3 基于代理类的 AOP 实现)</p><a id="more"></a><h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><p><a href="#2-Spring-IoC">2 Spring IoC</a><br>[2.1 Spring IoC 的基本概念](#2.1 Spring IoC 的基本概念)<br>[2.2 Spring IoC 容器](#2.2 Spring IoC 容器)<br>[2.2.1 BeanFactory](#2.2.1 BeanFactory)<br>[2.2.2 ApplicationContext](#2.2.2 ApplicationContext)<br>[2.3 依赖注入的类型](#2.3 依赖注入的类型)<br>[2.3.1 使用构造方法注入](#2.3.1 使用构造方法注入)<br>[2.3.2 使用属性的 setter 方法注入](#2.3.2 使用属性的 setter 方法注入)<br>[3 Spring Bean](#3 Spring Bean)<br>[3.1 Bean 的配置](#3.1 Bean 的配置)<br>[3.2 Bean 的实例化](#3.2 Bean 的实例化)<br>[3.2.1 构造方法实例化](#3.2.1 构造方法实例化)<br>[3.2.2 静态工厂实例化](#3.2.2 静态工厂实例化)<br>[3.2.3 实例工厂实例化](#3.2.3 实例工厂实例化)<br>[3.3 Bean 的作用域](#3.3 Bean 的作用域)<br>[3.3.1 singleton作用域](#3.3.1 singleton作用域)<br>[3.3.2 prototype作用域](#3.3.2 prototype作用域)<br>[3.4 Bean 的生命周期](#3.4 Bean 的生命周期)<br>[3.5 Bean 的装配方式](#3.5 Bean 的装配方式)<br>[3.5.1 基于 XML 配置的装配](#3.5.1 基于 XML 配置的装配)<br>[3.5.2 基于注解的装配](#3.5.2 基于注解的装配)<br>[4 Spring AOP](#4 Spring AOP)<br>[4.1 Spring AOP 的基本概念](#4.1 Spring AOP 的基本概念)<br>[4.1.1 AOP 的概念](#4.1.1 AOP 的概念)<br>[4.1.2 AOP 的术语](#4.1.2 AOP 的术语)<br>[4.2 动态代理](#4.2 动态代理)<br>[4.2.1 JDK 动态代理](#4.2.1 JDK 动态代理)<br>[4.2.2 CGLIB](#4.2.2 CGLIB)<br>[4.3 基于代理类的 AOP 实现](#4.3 基于代理类的 AOP 实现)</p><h3 id="2-Spring-IoC"><a href="#2-Spring-IoC" class="headerlink" title="2 Spring IoC"></a>2 Spring IoC</h3><h4 id="2-1-Spring-IoC-的基本概念"><a href="#2-1-Spring-IoC-的基本概念" class="headerlink" title="2.1 Spring IoC 的基本概念"></a>2.1 Spring IoC 的基本概念</h4><ul><li>控制反转（Inversion of Control，IoC）是一个比较抽象的概念，是Spring框架的核心，用来消除计算机程序的耦合问题。依赖注入（Dependency Injection，DI）是 IoC 的另外一个说法，只是从不同的角度描述相同的概念。下面通过实际生活中的一个例子来解释 IoC 和 DI 。</li><li>当人们需要一件东西时，第一反应就是找东西，例如吃面包。在没有面包店和有面包店两种情况下，您会怎么做？在没有面包店时，最直观的做法可能是您按照自己的口味制作面包，也就是一个面包需要主动制作。然而时至今日，各种网点、实体店盛行，已经没有必要自己制作面包。想吃面包了，去网店或实体店把自己的口味告诉店家，一会就可以吃到面包了。注意，您并没有制作面包，而是由店家制作，但是完全符合您的胃口。<br>上面只是列举一个非常简单的例子，但包含了控制反转的思想，即把制作面包的主动权交给店家。下面通过面向对象编程思想继续探讨这两个概念。</li><li>当某个Java对象(调用者，例如您)需要调用另一个Java对象(被调用者，即被依赖对象，例如面包)时，在传统编程模式下，调用者通常会采用“new被调用者”的代码方式来创建对象(例如您自己制作面包)。这种方式会增加调用者与被调用者之间的耦合性，不利于后期代码的升级与维护。</li><li>当Spring框架出现后，对象的实例不再由调用者来创建，而是由Spring容器(例如面包店)来创建。Spring容器会负责控制程序之间的关系(例如面包店负责控制您与面包的关系)，而不是由调用者的程序代码直接控制。这样，控制权由调用者转移到Spring 容器，控制权发生了反转，这就是Spring的控制反转。<br>从Spring容器角度来看，Spring 容器负责将被依赖对象赋值给调用者的成员变量，相当于为调用者注入它所依赖的实例，这就是Spring的依赖注入。</li><li>综上所述，控制反转是一种通过描述(在Spring中可以是XML或注解)并通过第三方去产生或获取特定对象的方式。在Spring 中实现控制反转的是IoC容器，其实现方法是依赖注入。</li></ul><h4 id="2-2-Spring-IoC-容器"><a href="#2-2-Spring-IoC-容器" class="headerlink" title="2.2 Spring IoC 容器"></a>2.2 Spring IoC 容器</h4><p>实现控制反转的时 Spring IoC 容器。Spring IoC 容器的设计主要基于<code>BeanFactory</code> 和 <code>ApplicationContext</code> 两个接口。</p><h4 id="2-2-1-BeanFactory"><a href="#2-2-1-BeanFactory" class="headerlink" title="2.2.1 BeanFactory"></a>2.2.1 BeanFactory</h4><p><code>BeanFactory由org.springframework. beans.factory.BeanFactory</code>接口定义，它提供了完整的IoC服务支持，是一个管理Bean的工厂，主要负责初始化各种Bean。<code>BeanFactory</code> 接口有多个实现类，其中比较常用的是<code>org.springframework .beans factory.xml.XmlBeanFactory</code>,该类会根据XML配置文件中的定义来装配Bean()。<br>在创建<code>BeanFactory</code>实例时<strong>需要提供XML文件的绝对路径</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.XmlBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        ApplicationContext classPathXmlApplicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line"><span class="comment">//        TestDaoImpl testDaoImpl = (TestDaoImpl) classPathXmlApplicationContext.getBean(&quot;testDaoImpl&quot;);</span></span><br><span class="line"><span class="comment">//        testDaoImpl.sayHello();</span></span><br><span class="line">        BeanFactory beanFactory = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> FileSystemResource(<span class="string">&quot;applicationContext.xml的绝对路径&quot;</span>));</span><br><span class="line">        TestDaoImpl testDaoImpl = (TestDaoImpl) beanFactory.getBean(<span class="string">&quot;testDaoImpl&quot;</span>);</span><br><span class="line">        testDaoImpl.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：使用BeanFactory实例加载配置文件在实际开发并不多见，我们只需要了解即可。</strong></p><h4 id="2-2-2-ApplicationContext"><a href="#2-2-2-ApplicationContext" class="headerlink" title="2.2.2 ApplicationContext"></a>2.2.2 ApplicationContext</h4><p><code>ApplicationContext</code>是 <code>BeanFactory</code> 的子接口，也称应用上下文，由<code>org.springframework.context.ApplicationContext</code>接口定义。<code>ApplicationContext</code>接口包含 <code>BeanFactory</code> 的所有功能外，还添加了对国际化、资源访问、事件传播等内容的支持。<br>创建<code>ApplicationContext</code>接口实例通常有以下三种方法：</p><p>通过<code>ClassPathXmlApplicationContext</code> 创建<br><code>ClassPathXmlApplicationContext</code> 将从类路径目录（src根目录）中寻找指定的XML配置文</p><p><img src="SpringStudy.assets/1636249741950.png" alt="1636249741950"></p><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        TestDaoImpl testDaoImpl = (TestDaoImpl) classPathXmlApplicationContext.getBean(<span class="string">&quot;testDaoImpl&quot;</span>);</span><br><span class="line">        testDaoImpl.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.通过<code>FileSystemXmlApplicationContext</code>创建</p><p><code>FileSystemXmlApplicationContex</code>t将从配置文件的<strong>绝对路径</strong>中寻找XML配置文件，找到并装载完成 ApplicationContext 的实例化工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileSystemXmlApplicationContext fileSystemXmlApplicationContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml文件的绝对路径&quot;</span>);</span><br><span class="line">        TestDaoImpl testDaoImpl = (TestDaoImpl) fileSystemXmlApplicationContext.getBean(<span class="string">&quot;testDaoImpl&quot;</span>);</span><br><span class="line">        testDaoImpl.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>采用绝对路径的加载方式将导致程序的灵活性变差，一般不推荐使用。因此，通常在 Spring 的 java 应用中采取通过 ClassPathXmlApplicationContext 类来实例化 ApplicationContext 容器的实例化工作将交给Web服务器完成。</strong> </p><p>3.通过Web服务器实例化<code>ApplicationContext</code> 容器<br>在Web服务器实例化<code>ApplicationContext</code> 容器时，一般使用基于<code>org.springframework.web.context.ContextLoaderListener</code> 的实现方式（需要将<code>spring-web-5.0.2.RELEASE.jar</code>复制到WEB-INF/lib目录中），此方法只需要在web.xml中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">&lt;!-- 加载src目录下的 applicationContext.xml文件--&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;</span><br><span class="line">classpath:applicationContext.xml</span><br><span class="line">&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定以 ContextLoaderListener 方式启动 Spring 容器 --&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">&lt;listener-<span class="class"><span class="keyword">class</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span></span></span><br><span class="line"><span class="class">&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h4 id="2-3-依赖注入的类型"><a href="#2-3-依赖注入的类型" class="headerlink" title="2.3 依赖注入的类型"></a>2.3 依赖注入的类型</h4><p>在 Spring 中实现 IoC 容器的方法是依赖注入，依赖注入的作用是在使用 Spring 框架创建对象时动态地将其所依赖的对象（例如属性值）注入 Bean 组件中。Spring 框架的依赖注入通常有两种实现方法，一种是使用构造方法注入，另一种是使用属性的 <code>setter</code> 方法注入。</p><h4 id="2-3-1-使用构造方法注入"><a href="#2-3-1-使用构造方法注入" class="headerlink" title="2.3.1 使用构造方法注入"></a>2.3.1 使用构造方法注入</h4><p>Spring 框架可以采用java的反射机制，通过构造方法完成依赖注入。下面开始代码演示：</p><p>目的：在service 中使用构造方法依赖注入 TestEr 接口对象。</p><ol><li><p>创建 dao 包<br>TestEr 接口代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestEr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>TestErbao 实现类的代码如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package demo2.dao;</span><br><span class="line"></span><br><span class="line">public class TestErbao implements TestEr &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;TestEr: say Hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建 service 包<br>TestErService 接口代码如下 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestErService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>TestErServiceImpl  实现类的代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo2.dao.TestEr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestErServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestErService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TestEr TestErbao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，用于实现依赖注入接口TestEr</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestErServiceImpl</span><span class="params">(TestEr TestErbao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.TestErbao = TestErbao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TestErbao.sayHello();</span><br><span class="line">        System.out.println(<span class="string">&quot;TestErService 构造方法注入say:,hello Spring&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写配置文件<br>在<code>demo2</code>包下创建<code>applicationContext.xml</code>文件。在配置文件中首先将<code>TestErbao</code> 类托管给 Spring，让Spring 创建其对象，然后<code>service.TestErServiceImpl</code> 类托管给 Spring，让 Spring 创建其对象，同时给构造方法传递实参。配置文件具体代码如下：</p><p>**注意： 这是xml文件，注释不是 // **</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TestErbao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo2.dao.TestErbao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo2.service.TestErServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        index = 0 表示 第一个参数为 引用的 testDIDaoImpl--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;TestErbao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建 Test 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo2.service.TestErService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;demo2/applicationContext.xml&quot;</span>);</span><br><span class="line">        TestErService testServiceImpl = (TestErService) classPathXmlApplicationContext.getBean(<span class="string">&quot;testServiceImpl&quot;</span>);</span><br><span class="line">        testServiceImpl.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果；</p></li></ol><p><img src="SpringStudy.assets/1636253087861.png" alt="1636253087861"></p><h4 id="2-3-2-使用属性的-setter-方法注入"><a href="#2-3-2-使用属性的-setter-方法注入" class="headerlink" title="2.3.2 使用属性的 setter 方法注入"></a>2.3.2 使用属性的 setter 方法注入</h4><p>使用 <code>setter</code> 方法注入是 Spring 框架中最主流的注入方式，它利用 Java Bean 规范所定义的 <code>setter</code> 方法完成注入，灵活且可读性高。对于 <code>setter</code> 方法注入，Spring 框架也是使用了 Java 的反射机制实现的。下面代码讲解如何使用 setter 方法注入：</p><p>创建接口实现类 <code>TestErServiceImpl2</code><br>在 <code>TestErServiceImpl2</code> 中使用属性的 setter 方法依赖注入 TestEr 接口对象，具体代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo2.dao.TestEr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestErServiceImpl2</span> <span class="keyword">implements</span> <span class="title">TestErService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TestEr TestErbao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加  TestEr 的setter 方法 用于实现依赖注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestEr</span><span class="params">(TestEr TestErbao)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.TestErbao = TestErbao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TestErbao.sayHello();</span><br><span class="line">        System.out.println(<span class="string">&quot;TestErServiceImpl2 setter注入&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将 TestErServiceImpl2 类托管给 Spring</p><p>将 TestErServiceImpl2 类托管给 Spring，让 Spring 创建其对象，同时调用 TestErServiceImpl2 类的 setter 方法完成依赖注入。ApplicationContext.xml配置文件代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TestErbao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo2.dao.TestErbao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo2.service.TestErServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        index = 0 表示 第一个参数为 引用的 testDIDaoImpl--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;TestErbao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testServiceImpl2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo2.service.TestErServiceImpl2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;TestEr&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;TestErbao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Test类中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo2.service.TestErService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;demo2/applicationContext.xml&quot;</span>);</span><br><span class="line">        TestErService testServiceImpl = (TestErService) classPathXmlApplicationContext.getBean(<span class="string">&quot;testServiceImpl2&quot;</span>);</span><br><span class="line">        testServiceImpl.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果；</p><p><img src="SpringStudy.assets/1636254214152.png" alt="1636254214152"></p><h3 id="3-Spring-Bean"><a href="#3-Spring-Bean" class="headerlink" title="3 Spring Bean"></a>3 Spring Bean</h3><p>Spring 可以看作一个大型工厂，用于生产和管理 Spring 容器中的 Bean。如果要使用这个工厂生产和管理 Bean，需要开发者将 Bean 配置在 Spring 的配置文件中。Spring 框架支持 XML 和Properties 两种格式的配置文件，在实际开发中常用 XML 格式的配置文件。<br>从前面的学习得知 XML 配置文件的根元素是&lt; beans&gt;，<br>&lt; beans&gt;中包含多个&lt; bean&gt;子元素，每个&lt; bean&gt;元素定义一个 Bean，并描述 Bean 如何被装配到 Spring 中。&lt; bean&gt;元素的常用属性及其子元素如下图：</p><table><thead><tr><th align="center">属性或子元素名称</th><th align="center">描 述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">Bean 在 BeanFactory中唯一的标识，在代码中通过 BeanFactory 获取 Bean 实例时需要以此作为索引名称</td></tr><tr><td align="center">class</td><td align="center">Bean 的具体实现类，使用类的名（例如：demo2.TestErbao）</td></tr><tr><td align="center">scope</td><td align="center">指定 Bean 实例的作用域，具体在后面讲解</td></tr><tr><td align="center">constructor-arg</td><td align="center">&lt; bean&gt;元素的子元素，使用构造方法注入，指定构造方法的参数。该元素的 index属性指定参数的序号，ref 属性指定对 <code>BeanFactory</code> 中其他 Bean 的引用关系，type 属性指定参数的类型，value 属性指定参数的常量值</td></tr><tr><td align="center">property</td><td align="center">&lt; bean&gt;元素的子元素，用于设置一个属性。该元素的name属性指定Bean 实例中相应的属性名称，value 属性指定 Bean 的属性值，ref 属性指定属性对BeanFactory 中其他 Bean 的引用关系</td></tr><tr><td align="center">list</td><td align="center">property元素的子元素，用于封装 List 或数组类型的依赖注入，具体后面介绍（3.5）</td></tr><tr><td align="center">map</td><td align="center">property元素的子元素，用于封装 Map 类型的依赖注入，具体后面介绍（3.5）</td></tr><tr><td align="center">set</td><td align="center">property元素的子元素，用于封装 Set 类型的依赖注入，具体后面介绍（3.5）</td></tr><tr><td align="center">entry</td><td align="center">map元素的子元素，用于设置一个键值对，具体后面介绍（3.5）</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TestErbao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo2.dao.TestErbao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo2.service.TestErServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        index = 0 表示 第一个参数为 引用的 testDIDaoImpl--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;TestErbao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testServiceImpl2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo2.service.TestErServiceImpl2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;TestEr&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;TestErbao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-Bean-的实例化"><a href="#3-2-Bean-的实例化" class="headerlink" title="3.2 Bean 的实例化"></a>3.2 Bean 的实例化</h4><p>在面向对象编程中，如果想使用某个对象，需要实现实例化该对象。同样，在 Spring 框架中，如果像使用 Spring 容器中的 Bean，也需要实例化 Bean。Spring 框架实例化 Bean 有3种方式，即构造方法实例化、静态工厂实例化和实例工厂实例化（其中，最常用的是构造方法实例化）。</p><h4 id="3-2-1-构造方法实例化"><a href="#3-2-1-构造方法实例化" class="headerlink" title="3.2.1 构造方法实例化"></a>3.2.1 构造方法实例化</h4><p>在 Spring 框架中，Spring 容器可以调用 Bean 对应类中的无参构造方法来实例化 Bean，这种方法称为无参构造方法实例化。下面代码演示过程</p><p>1.创建demo3包</p><p><img src="SpringStudy.assets/1636256717812.png" alt="1636256717812"></p><p>2.创建 <code>BeanClass</code> 类<br>在demo3包中创建 <code>BeanClass</code> 类，代码如下 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String messages;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        messages = <span class="string">&quot;构造方法实例化Bean&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanClass</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        messages = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.创建配置文件<br>在demo3包下创建 <code>applicationContext.xml</code> 文件，在配置文件中定义一个 id为 <code>constructorInstance</code> 的 Bean，代码如下 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;constructorInstance&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo3.BeanClass&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、创建测试类<br>在demo3包下创建<code>Test</code>类并进行测试，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;demo3/applicationContext.xml&quot;</span>);</span><br><span class="line">        BeanClass constructorInstance = (BeanClass) classPathXmlApplicationContext.getBean(<span class="string">&quot;constructorInstance&quot;</span>);</span><br><span class="line">        System.out.println(constructorInstance + constructorInstance.messages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="SpringStudy.assets/1636256957757.png" alt="1636256957757"></p><h4 id="3-2-2-静态工厂实例化"><a href="#3-2-2-静态工厂实例化" class="headerlink" title="3.2.2 静态工厂实例化"></a>3.2.2 静态工厂实例化</h4><p>在使用静态工厂实例化 <code>Bean</code> 时要求开发者在工厂类中创建一个静态方法来创建 Bean 的实例。在配置 Bean 时，<code>class</code> 属性指定静态工厂类，同时还需要使用 <code>factory-method</code> 属性指定工厂类中的静态方法。下面通过代码演示：</p><p>创建工厂类 <code>BeanStaticFactory</code><br>在 demo3包中创建 <code>BeanStaticFactory</code>，该类中有一个静态方法来实例化对象，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanStaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BeanClass beanInstance = <span class="keyword">new</span> BeanClass(<span class="string">&quot;调用静态工厂方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeanClass <span class="title">createInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编辑demo3包下的配置文件 applicationContext.xml 代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;constructorInstance&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo3.BeanClass&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 静态工厂方法实例化 Bean，createInstance 为静态工厂类 BeanStaticFactory 中的静态方法   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;staticFactoryInstance&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo3.BeanStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createInstance&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写Test类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;demo3/applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        BeanClass staticFactoryInstance = (BeanClass) classPathXmlApplicationContext.getBean(<span class="string">&quot;staticFactoryInstance&quot;</span>);</span><br><span class="line">        System.out.println(staticFactoryInstance + staticFactoryInstance.messages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="SpringStudy.assets/1636257115687.png" alt="1636257115687"></p><h4 id="3-2-3-实例工厂实例化"><a href="#3-2-3-实例工厂实例化" class="headerlink" title="3.2.3 实例工厂实例化"></a>3.2.3 实例工厂实例化</h4><p>在使用实例工厂实例化 Bean 时要求开发者在工厂类中创建一个实例方法来创建 Bean 的实例。在配置 Bean 时需要使用 factory-bean 属性指定配置的实例工厂，同时还需要使用 factory-method 属性指定实例工厂中的实例方法。下面通过代码讲解：</p><p>创建工厂类 BeanInstanceFactory<br>在demo3包中创建工厂类 BeanInstanceFactory，该类中有一个实例方法来实例对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanClass <span class="title">createInstanceFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BeanClass(<span class="string">&quot;调用实例工厂方法实例化 Bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 编辑demo3包下的配置文件 applicationContext.xml 代码如下 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置工厂   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo3.BeanInstanceFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用 factory-bean 属性指定配置工厂，使用 factory-method 属性指定使用工厂中的哪一个方法实例化 Bean   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactoryInstance&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createInstanceFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写测试代码</p><h4 id="3-3-Bean-的作用域"><a href="#3-3-Bean-的作用域" class="headerlink" title="3.3 Bean 的作用域"></a>3.3 Bean 的作用域</h4><p>在 Spring 中不仅可以完成 Bean 的实例化，还可以为 Bean 指定作用域。在 Spring 5.0 中为 Bean 的实例定义了如下所示的作用域</p><table><thead><tr><th align="center">作用域名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">singleton</td><td align="center">默认的作用域，使用 singleton 定义的 Bean 在 Spring 容器中只有一个 Bean实例</td></tr><tr><td align="center">prototype</td><td align="center">Spring 容器每次获取prototype 定义的 Bean，容器都将创建一个新的 Bean 实例</td></tr><tr><td align="center">request</td><td align="center">在一个 HTTP 请求中容器将返回一个 Bean实例，不同的 HTTP 请求返回不同的 Bean实例。仅在 Web Spring 应用程序上下文中使用</td></tr><tr><td align="center">session</td><td align="center">在一个 HTTP Session中，容器将返回同一个 Bean 实例。仅在 Web Spring 应用程序上下文中使用</td></tr><tr><td align="center">application</td><td align="center">为每个 ServletContext 对象创建一个实例，即同一个应用共享一个 Bean 实例。仅在 Web Spring 应用程序上下文中使用</td></tr><tr><td align="center">websocket</td><td align="center">为每个 WebSocket 对象创建一个 Bean 实例。仅在 Web Spring 应用程序上下文中使用</td></tr></tbody></table><h4 id="3-3-1-singleton作用域"><a href="#3-3-1-singleton作用域" class="headerlink" title="3.3.1 singleton作用域"></a>3.3.1 singleton作用域</h4><p>当将 bean 的 scope 设置为 singleton 时，Spring IoC 容器仅生成和管理一个 Bean 实例。在使用 id 或 name 获取 Bean 实例时，IoC 容器将返回共享的 Bean 实例。<br>由于 singleon 时 scope 的默认方式，因此：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;constructorInstance&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo3.BeanClass&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;constructorInstance&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo3.BeanClass&quot;</span> scope=<span class="string">&quot;singleton&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 是等价的。 </p><p> 测试 singleton 的作用域，代码如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package demo3;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;demo3&#x2F;applicationContext.xml&quot;);</span><br><span class="line"></span><br><span class="line">        BeanClass constructorInstance &#x3D; (BeanClass) classPathXmlApplicationContext.getBean(&quot;constructorInstance&quot;);</span><br><span class="line">        BeanClass constructorInstance2 &#x3D; (BeanClass) classPathXmlApplicationContext.getBean(&quot;constructorInstance&quot;);</span><br><span class="line">        System.out.println(constructorInstance);</span><br><span class="line">        System.out.println(constructorInstance2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果；</p><p><img src="SpringStudy.assets/1636375449367.png" alt="1636375449367"></p><p> <strong>Bean 实例时，IoC 容器仅返回一个 Bean 实例。</strong> </p><h4 id="3-3-2-prototype作用域"><a href="#3-3-2-prototype作用域" class="headerlink" title="3.3.2 prototype作用域"></a>3.3.2 prototype作用域</h4><p>当将 Bean 的 scope 设置为 prototype 时，Spring IoC 容器将为每次请求创建一个新的实例。将3.3.1中<code>applicationContext.xml</code>配置文件修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;constructorInstance&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo3.BeanClass&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 测试代码不变，输出结果如下： </p><p><img src="SpringStudy.assets/1636374246248.png" alt="1636374246248"></p><p> **从上图运行结果得知，在使用id或name 两次获取 Bean 实例时， IoC 容器将返回两个不同的 Bean 实例。 ** </p><h3 id="3-4-Bean-的生命周期"><a href="#3-4-Bean-的生命周期" class="headerlink" title="3.4 Bean 的生命周期"></a>3.4 Bean 的生命周期</h3><p>一个对象的生命周期包括创建(实例化与初始化)、使用以及销毁等阶段，在 <code>Spring</code> 中，Bean 对象周期也遵循这一过程， 但是 Spring 提供了许多对外接口，允许开发者对3个过程(实例化、初始化、销毁)的前后做一些操作。 在 Spring Bean 中，实例化是为 Bean 对象开辟空间，初始化则是对属性的初始化。<br>Spring 容器可以管理 singleton 作用域 Bean 的生命周期，在此作用域下，Spring 能够精确地知道 Bean 何时被创建，何时初始化完成，以及何时被销毁。而对于 prototype 作用域的 Bean , Spring 只负责创建，当容器创建了 Bean 的实例后，Bean 实例就交给了客户端的代码管理，Spring 容器将不再跟踪其生命周期，并且不会管理那些被配置成 prototype 作用域的 Bean 。Spring 中 Bean 的生命周期的执行是一个很复杂的过程，可借鉴 Servlet 的生命周期“实例化初始化 <code>(init)</code>–&gt;接收请求 <code>(service)</code>–&gt;销毁 <code>(destroy)</code>”来理解 Bean 的生命周期。</p><h5 id="Bean-的生命周期的整个过程如下"><a href="#Bean-的生命周期的整个过程如下" class="headerlink" title="Bean 的生命周期的整个过程如下:"></a>Bean 的生命周期的整个过程如下:</h5><ul><li>(1)根据 Bean 的配置情况实例化一个 Bean。</li><li>(2)根据 Spring 上下文对实例化的 Bean 进行依赖注入，即对 Bean 的属性进行初始化。</li><li>(3)如果 Bean 实现了 BeanNameAware 接口，将调用它实现的setBeanName(Stringbeanld) 方法，此处参数传递的是 Spring 配置文件中 Bean 的 id。</li><li>(4)如果 Bean 实现了 BeanFactoryAware 接口，将调用它实现的setBeanFactory 方法，此处参数传递的是当前 Spring 工厂实例的引用。</li><li>(5)如果 Bean 实现了 ApplicationContextAware 接口，将调用它实现的 setApplicationContext（applicationContext）方法，此处参数传递的是 Spring 上下文实例的引用。</li><li>(6)如果 Bean 关联了 BeanPostProcessor 接口，将调用初始化方法postProcessBeforeInitialization(Object obj， String s)对 Bean 进行操作。</li><li>(7)如果 Bean实现了 InitializingBean 接口，将调用 afterPropertiesSet方法。</li><li>(8)如果 Bean在Spring 配置文件中配置了 init-method 属性，将自动调用其配置的初始化方法。</li><li>(9)如果 Bean 关联了 BeanPostProcessor 接口，将调用postProcessAfterlnitializatior(Object obj, String s) 方法，由于是在 Bean初始化结束时调用After方法，也可用于内存或缓存技术。</li><li><strong>注意:以上工作完成后就可以使用该 Bean ,由于该Bean的作用域是singleton,所以调用的是同一个 Bean 实例。</strong></li><li>10)当 Bean 不再需要时将进入销毁阶段，如果 Bean 实现了DiposableBaen 接口，则调用其实现的destroy方法将 Spring 中的 Bean销毁。</li><li>(11)如果配置文件中通过 destroy-method 属性指定了 Bean 的销毁方法，将调用其配置的销毁方法进行销毁。</li></ul><p>在 Spring 中，通过实现特定的接口或通过&lt; bean&gt; 元素设置可以对 Bean 的生命周期过程产生影响。开发者可以随意地配置&lt; bean&gt; 元素的属性，但不建议过多地使用 Bean 实现接口，因为这样将使代码和 Spring 聚合比较紧密。下面通过实例演示 Bean 的生命周期。</p><h5 id="1-创建-Bean-的实现类"><a href="#1-创建-Bean-的实现类" class="headerlink" title="1.创建 Bean 的实现类"></a>1.创建 Bean 的实现类</h5><p>在 src 下创建一个 demo4 的包，在此包下创建 BeanLife 类。在 BeanLife类中有两个方法，一个演示初始化过程，一个演示销毁过程。具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package demo4;</span><br><span class="line"></span><br><span class="line">public class BeanLife &#123;</span><br><span class="line">    public void initMyself()&#123;</span><br><span class="line">        System.out.println(this.getClass().getName()+&quot; 执行自定义的初始化方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void destroyMysqlf()&#123;</span><br><span class="line">        System.out.println(this.getClass().getName()+&quot; 执行自定义的销毁方法&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-配置-Bean"><a href="#2-配置-Bean" class="headerlink" title="2.配置 Bean"></a>2.配置 Bean</h5><p>在demo4 中创建 ApplicationContext.xml 配置文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">                        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置 bean，使用 init-method 属性指定初始化方法，使用 destroy-method 属性指定销毁方法  --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;BeanLife&quot; class&#x3D;&quot;demo4.BeanLife&quot; init-method&#x3D;&quot;initMyself&quot; destroy-method&#x3D;&quot;destroyMyself&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-测试生命周期"><a href="#3-测试生命周期" class="headerlink" title="3.测试生命周期"></a>3.测试生命周期</h5><p>在 demo4 中创建 Test 测试类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了方便演示销毁方法的执行，这里使用 ClassPathXmlApplicationContext</span></span><br><span class="line">        ClassPathXmlApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;demo4/applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获取对象前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        BeanLife beanLife = (BeanLife) classPathXmlApplicationContext.getBean(<span class="string">&quot;BeanLife&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获取对象后&quot;</span>+beanLife);</span><br><span class="line"></span><br><span class="line">        classPathXmlApplicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="SpringStudy.assets/1636377275222.png" alt="1636377275222"></p><p> 从图中我们可以看出，在加载配置文件时执行了 Bean 的初始化方法 initMyself；在获得对象后，关闭容器时，执行了 Bean 的销毁方法 destroyMyself。 </p><h5 id="3-5-Bean-的装配方式"><a href="#3-5-Bean-的装配方式" class="headerlink" title="3.5 Bean 的装配方式"></a>3.5 Bean 的装配方式</h5><p>Bean 的装配可以理解为将 Bean 依赖注入到 Spring 容器中，Bean 的装配方式即 Bean 依赖注入的方式。Spring 容器支持基于 XML 配置的装配、基于注解的装配以及自动装配等多种装配方式，其中最受亲睐的装配方式是基于注解的装配。本章主要讲解基于 XML 配置的装配和基于注解的装配。</p><h5 id="3-5-1-基于-XML-配置的装配"><a href="#3-5-1-基于-XML-配置的装配" class="headerlink" title="3.5.1 基于 XML 配置的装配"></a>3.5.1 基于 XML 配置的装配</h5><p>基于 XML 配置的装配方式已经有很久的历史了，曾经是主要的装配方式。通过 2.3 节的学习，我们知道 Spring 提供了两种基于XML 配置的装配方式，即使用构造方法注入和使用属性的setter方法注入。<br>在使用构造方法注入方式装配 Bean时，Bean 的实现类需要提供带参数的构造方法,并在配置文件中使用&lt; bean&gt;元素的子元素&lt; constructor-arg&gt;来定义构造方法的参数;在使用属性的setter方法注入方式装配 Bean时，Bean 的实现类需要提供一个默认无参数的构造方法,并为需要注入的属性提供对应的 setter 方法，另外还需要使用&lt; bean&gt;元素的子元素&lt; property&gt;为每个属性注入值。</p><p>下面通过一个实例来演示基于XML配置的装配方式。</p><ol><li><p>创建 Bean 的实现类</p><p>在 src 目录下创建 <code>assemble</code> 包，在此包下创建 <code>ComplexUser</code> 类。在<code>ComplexUser</code> 类中分别使用构造方法和使用属性的 setter 方法注入。具体代码如下： </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> assemble;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComplexUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbyList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; residenceMap;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; aliasSet;</span><br><span class="line">    <span class="keyword">private</span> String[] array;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     无参构造，setter 方法注入时需要用到，</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComplexUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComplexUser</span><span class="params">(String name, List&lt;String&gt; hobbyList, Map&lt;String, String&gt; residenceMap, Set&lt;String&gt; aliasSet, String[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.hobbyList = hobbyList;</span><br><span class="line">        <span class="keyword">this</span>.residenceMap = residenceMap;</span><br><span class="line">        <span class="keyword">this</span>.aliasSet = aliasSet;</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性的 set 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbyList</span><span class="params">(List&lt;String&gt; hobbyList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbyList = hobbyList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResidenceMap</span><span class="params">(Map&lt;String, String&gt; residenceMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.residenceMap = residenceMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAliasSet</span><span class="params">(Set&lt;String&gt; aliasSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aliasSet = aliasSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(String[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ComplexUser&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hobbyList=&quot;</span> + hobbyList +</span><br><span class="line">                <span class="string">&quot;, residenceMap=&quot;</span> + residenceMap +</span><br><span class="line">                <span class="string">&quot;, aliasSet=&quot;</span> + aliasSet +</span><br><span class="line">                <span class="string">&quot;, array=&quot;</span> + Arrays.toString(array) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>配置 Bean<br>在 Spring 配置文件( applicationContext.xml 代码如下 )中使用 ComplexUser 配置 Bean 的两个实例，具体代码如下：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用构造方法注入   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;assemble.ComplexUser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wdf&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>爬山<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;dalian&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大连&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;beijing&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;shanghai&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>wdf100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>wdf101<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>wdf102<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  使用 setter 方法注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;assemble.ComplexUser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wdf2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbyList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看书<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;residenceMap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;shenzhen&quot;</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;tianjin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;天津&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;aliasSet&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>wdf104<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>wdf105<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>cccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>dddd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Test类 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> assemble;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;assemble/applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用构造方法装配</span></span><br><span class="line">        ComplexUser user1 = (ComplexUser) classPathXmlApplicationContext.getBean(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 setter 方法装配</span></span><br><span class="line">        ComplexUser user2 = (ComplexUser) classPathXmlApplicationContext.getBean(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="SpringStudy.assets/1636428820726.png" alt="1636428820726"></p><h5 id="3-5-2-基于注解的装配"><a href="#3-5-2-基于注解的装配" class="headerlink" title="3.5.2 基于注解的装配"></a>3.5.2 基于注解的装配</h5><p>在 Spring 框架中，尽管使用 XML 配置文件可以简单地装配 Bean，但如果应用中有大量的 Bean 需要装配，会导致 XML 配置文件过于庞大，不方便以后的升级与维护，因此更多的时候推荐开发者使用注解（annotation）的方式去装配 Bean。<br>在 Spring 框架中定义了一系列的注解，下面介绍几种常用的注解。</p><p>一 、@Component<br>该注解是一个泛化的概念，仅仅表示一个组件对象（Bean），可以作用在任何层次上。下面通过一个实例讲解@Component。</p><ul><li><p>创建 Bean的实现类<br>在 src 目录下创建 <code>annotation</code> 包，在该包下创建 Bean 的实现类 <code>AnnotationUser</code>，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package annotation;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component()</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 相当于把 id 为 annotationUser 的 Bean 注册到 Spring 容器中。</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class AnnotationUser &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;wdf&quot;) &#x2F;&#x2F; 只能注入简单的值，对于复杂的值目前使用该方法还解决不了</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置注解<br>现在有了 Bean 的实现类，但不能进行测试，因为 Spring 容器并不知道去哪里扫描 Bean 对象，需要在配置文件中配置注解，在annotation包下创建applicationContext.xml 具体代码如下：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描annotation包下的注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;annotation&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;annotation/applicationContext.xml&quot;</span>);</span><br><span class="line">        AnnotationUser annotationUser = (AnnotationUser) classPathXmlApplicationContext.getBean(<span class="string">&quot;annotationUser&quot;</span>);</span><br><span class="line">        System.out.println(annotationUser.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="SpringStudy.assets/1636451486577.png" alt="1636451486577"></p><p><strong>注：</strong>在 Spring 4.0以上的版本，配置注解指定包中的注解进行扫描前需要实现导入 Spring AOP 的 JAR 包 spring-aop-5.0.2.RELEASE.jar </p><ul><li><p>二、@Repository<br>该注解用于将数据访问层（DAO）的类表示为 Bean，即注解数据访问层 Bean，其功能与@Component 相同。</p></li><li><p>三、@Service<br>该注解用于标注一个业务逻辑组件类（Service层），其功能与@Component 相同。</p></li><li><p>四、@Controller<br>该注解标注一个控制器组件类（Spring MVC 的 Controller），其功能与@Component 相同。</p></li><li><p>五、@Autowired<br>该注解可以对类成员变量、方法及构造方法进行标注，完成自动装配的工作。通过使用@Autowired 来消除 setter 和 getter 方法。默认按照 Bean 的类型进行装配。</p></li><li><p>六、@Resource<br>该注解与@Autowired 的功能一样，区别在于该注解默认是按照名称来装配注入的，只有当找不到名称匹配的 Bean 时才会按照类型来装配注入；而@Autowired 默认按照 Bean 的类型进行装配，如果想按照名称来装配注入，则需要和@Qualifier 注解一起使用<br>@Resource 注解有两个属性，name和type。name 属性指定 Bean 实例名称，即按照名称来装配注入；type 属性指定 Bean 的类型，即按照 Bean 的类型进行装配。</p></li><li><p>七、@Qualifier<br>该注解与 @Autowired 注解配合使用。当@Autowired 注解需要按照名称来装配注入时需要和该注解一起使用，Bean 的实例名称由@Qualifier 注解的参数指定。<br>在上面几个注解中，虽然@Repository、@Service和@Controller 等注解的功能与@Component 注解相同，但为了使类的标注更加清晰（层次化），在实际开发中推荐使用<code>@Repository</code> 标注<strong>数据访问层（DAO层）</strong>、使用<code>@Service</code> 标注<strong>业务逻辑层（Service 层）</strong>、使用<code>@Controller</code> 标注<strong>控制器层（控制层）</strong>。<br>下面通过一个实例讲解如何使用这些注解：</p></li><li><p>创建DAO层<br>在 src 中创建 annotation.dao 包，在该包下创建 TestDao 接口和 TestDaoImpl实现类，并将实现类 TestDaoImpl 使用 @Repository 注解标注为数据访问层。</p></li></ul><p>TestDao 的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package annotation.dao;</span><br><span class="line"></span><br><span class="line">public interface TestDao &#123;</span><br><span class="line">    public void save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> TestDaoImpl 的代码如下 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;testDaoImpl&quot;)</span></span><br><span class="line"><span class="comment">// 相当于@Repository，但如果在 service 层使用@Resource（name=”testDaoImpl“）， testDaoImpl 不能省略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaoImpl</span> <span class="keyword">implements</span> <span class="title">TestDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testDao save&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建 Service 层<br>在 src 中创建 annotation.service 包，在该包下创建 TestService 接口和 TestServiceImpl 实现类，并将实现类 TestServiceImpl 使用@Service 注解标注为业务逻辑层。<br>TestService 的代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package annotation.service;</span><br><span class="line"></span><br><span class="line">public interface TestService &#123;</span><br><span class="line">    public void save();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> TestServiceImpl 的代码如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package annotation.service;</span><br><span class="line"></span><br><span class="line">import annotation.dao.TestDao;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Service(&quot;testServiceImpl&quot;)</span><br><span class="line">&#x2F;&#x2F; 相当于@Service</span><br><span class="line">public class TestServiceImpl implements TestService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource(name &#x3D; &quot;testDaoImpl&quot;)</span><br><span class="line">    private TestDao testDao;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void save() &#123;</span><br><span class="line">        testDao.save();</span><br><span class="line">        System.out.println(&quot;testService save&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>创建 Controller 层：<br>在 src 中创建 annotation.controller 包，在该包下创建 TestController 类，并将 TestController 类使用@Controller 注解标注为控制层。</p><p> TestController 的代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> annotation.service.TestService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        testService.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;testController save&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描annotation包下的注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;annotation&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> annotation.controller.TestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext classPathXmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;annotation/applicationContext.xml&quot;</span>);</span><br><span class="line">        TestController testController = (TestController) classPathXmlApplicationContext.getBean(<span class="string">&quot;testController&quot;</span>);</span><br><span class="line">        testController.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="SpringStudy.assets/1636546338439.png" alt="1636546338439"></p></li></ul><h3 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h3><p>Spring AOP 是 Spring 框架体系结构中非常重要的功能模块之一，该模块提供了面向切面编程实现。面向切面编程在事物处理、日志记录、安全控制等操作中被广泛使用。本章将对 Spring AOP 的相关概念及实现进行详细讲解。</p><h4 id="4-1-Spring-AOP-的基本概念"><a href="#4-1-Spring-AOP-的基本概念" class="headerlink" title="4.1 Spring AOP 的基本概念"></a>4.1 Spring AOP 的基本概念</h4><h4 id="4-1-1-AOP-的概念"><a href="#4-1-1-AOP-的概念" class="headerlink" title="4.1.1 AOP 的概念"></a>4.1.1 AOP 的概念</h4><p>AOP (Aspect-Oriented Programming）即面向切面编程，它与OOP( Object-OrientedProgramming，面向对象编程）相辅相成，提供了与 OOP 不同的抽象软件结构的视角。在 OOP 中，以类作为程序的基本单元，而 AOP 中的基本单元是Aspect（切面)。Struts2 的拦截器设计就是基于 AOP 的思想,是个比较经典的应用。<br>在业务处理代码中通常有日志记录、性能统计、安全控制、事务处理、异常处理等操作。尽管使用 OOP 可以通过封装或继承的方式达到代码的重用，但仍然有同样的代码分散在各个方法中。因此，采用 OOP 处理日志记录等操作不仅增加了开发者的工作量，而且提高了升级维护的困难。为了解决此类问题，AOP 思想应运而生。AOP 采取横向抽取机制,即将分散在各个方法中的重复代码提取出来，然后在程序编译或运行阶段将这些抽取出来的代码应用到需要执行的地方。这种横向抽取机制采用传统的 OOP 是无法办到的，因为 OOP 实现的是父子关系的纵向重用。但是 AOP 不是 OOP 的替代品，而是 OOP 的补充，它们相辅相成。<br>在 AOP 中，横向抽取机制的类与切面的关系：</p><p><img src="SpringStudy.assets/1636546628373.png" alt="1636546628373"></p><h4 id="4-1-2-AOP-的术语"><a href="#4-1-2-AOP-的术语" class="headerlink" title="4.1.2 AOP 的术语"></a>4.1.2 AOP 的术语</h4><p>在 Spring AOP 框架中涉及以下常用术语。</p><ul><li><p>切面<br>切面（Aspect）是指封装横切到系统功能（例如事物处理）的类。</p></li><li><p>连接点<br>连接点（Joinpoint）是指程序运行中的一些时间点，例如方法的调用或异常的抛出。</p></li><li><p>切入点<br>切入点（Pointcut）是指需要处理的连接点。在 Spring AOP 中，所有的方法执行都是连接点，而切入点是一个描述信息，他修饰的是连接点，通过切入点确定哪些连接点需要被处理。切面、连接点和切入点的关系如下：</p></li></ul><p><img src="SpringStudy.assets/1636546744528.png" alt="1636546744528"></p><ul><li><p>通知<br>通知（Advice）是由切面添加到特定的连接点（满足切入点规则）的一段代码，即在定义好的切入点处所要执行的程序代码，可以将其理解为切面开启后切面的方法，因此通知是切面的具体实现。</p></li><li><p>引入<br>引入（Introduction）允许在现有的实现类中添加自定义的方法和属性。</p></li><li><p>目标对象<br>目标对象（Target Object）是指所有被通知的对象。如果 AOP 框架使用运行时代理的方式（动态的 AOP）来实现切面，那么通知对象总是一个代理对象。</p></li><li><p>代理<br>代理（Proxy）是通知应用到目标对象之后被动态创建的对象。</p></li><li><p>织入<br>织入（Weaving）是将切面代码插入到目标对象上，从而生成代理对象的过程。根据不同的实现技术，AOP 织入有 3 中方式；编译器织入，需要由特殊的 Java 编译器；类装载期织入，需要有特殊的类装载器；动态代理织入，在运行期为目标类添加通过生成子类的方式。Spring AOP 框架默认采用动态代理织入，而 AspectJ（基于 Java 语言的 AOP框架）采用编译期织入和类装载期织入</p></li></ul><h4 id="4-2-动态代理"><a href="#4-2-动态代理" class="headerlink" title="4.2 动态代理"></a>4.2 动态代理</h4><p>在 Java 中有很多动态代理技术，例如 JDK、CGLIB、Javassist、ASM，其中最常用的动态代理技术是 JDK 和 CGLIB。目前，在 Spring AOP 中常用 JDK 和 CGLIB 两种动态代理技术。</p><h4 id="4-2-1-JDK-动态代理"><a href="#4-2-1-JDK-动态代理" class="headerlink" title="4.2.1 JDK 动态代理"></a>4.2.1 JDK 动态代理</h4><p>JDK 动态代理是 java.lang.reflect.*包提供的方式，它必须借助一个接口才能产生代理对象，因此，对于使用业务接口的类，Spring 默认使用 JDK 动态代理实现 AOP。下面通过一个实例演示如何使用 JDK 动态代理实现 Spring AOP，具体步骤如下：</p><p>注：这里我们使用maven工程，其好处是导入jar包时十分方便。</p><p>安装 maven<br>配置 maven</p><ul><li>使用 Idea 创建 maven工程</li></ul><p><img src="SpringStudy.assets/1636547729841.png" alt="1636547729841"></p><p>一直点击下一步</p><ul><li>在pom 文件添加相关依赖 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring02&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;JDK&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;&#x2F;modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.2.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p> 把 src 目录删掉，我们在其中右键创建 Module。 </p><p><img src="SpringStudy.assets/1636547866656.png" alt="1636547866656"></p><ol><li><p>我们在 JDK module 的 src 目录下创建 dynamic.jdk 包，在该包创建接口 TestDao 和接口实现类 TestDaoImpl。该实现类作为目标类，在代理类中对其方法进行增强处理。</p><p>TestDao的代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package dynamic.jdk;</span><br><span class="line"></span><br><span class="line">public interface TestDao &#123;</span><br><span class="line">    public void save();</span><br><span class="line"></span><br><span class="line">    public void modify();</span><br><span class="line"></span><br><span class="line">    public void delete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TestDaoImpl 的代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package dynamic.jdk;</span><br><span class="line"></span><br><span class="line">public class TestDaoImpl implements TestDao &#123;</span><br><span class="line"></span><br><span class="line">    public void save() &#123;</span><br><span class="line">        System.out.println(&quot;保存&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void modify() &#123;</span><br><span class="line">        System.out.println(&quot;修改&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        System.out.println(&quot;删除&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>创建切面类<br>在 JDK module 的 dynamic.jdk 目录下创建切面类 MyAspect，注意在该类中可以定义多个通知（增强处理的功能方法）<br>MyAspect 的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package dynamic.jdk;</span><br><span class="line"></span><br><span class="line">public class MyAspect &#123;</span><br><span class="line">    public void check()&#123;</span><br><span class="line">        System.out.println(&quot;模拟权限控制&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void except()&#123;</span><br><span class="line">        System.out.println(&quot;模拟异常处理&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void log()&#123;</span><br><span class="line">        System.out.println(&quot;模拟日志&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><ol><li><p>创建代理类<br>在 dynamic.jdk 包中创建代理类 JDKDynamicProxy。在 JDK 动态代理类必须实现 java.lang.reflect.InvocationHandler 接口，并编写代理方法，在代理方法中需要通过 Proxy 实现动态代理。</p><p>JDKDynamicProxy 的代码如下: </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package dynamic.jdk;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">public class JDKDynamicProxy implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 声明目标类接口对象（真实对象）</span><br><span class="line">    private TestDao testDao;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建代理的方法，建立代理对象和真实对象的代理关系，并返回代理对象</span><br><span class="line">    public Object createProxy(TestDao testDao)&#123;</span><br><span class="line">        this.testDao &#x3D; testDao;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 类加载器</span><br><span class="line">        ClassLoader cld &#x3D; JDKDynamicProxy.class.getClassLoader();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 被代理对象实现的所有接口</span><br><span class="line">        Class[] classes &#x3D; testDao.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 使用代理类进行增强，返回代理后的对象</span><br><span class="line">        return Proxy.newProxyInstance(cld,classes,this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 代理的逻辑对象</span><br><span class="line">     * @param proxy 被代理的对象</span><br><span class="line">     * @param method 将要执行的方法</span><br><span class="line">     * @param args 执行方法时需要的参数</span><br><span class="line">     * @return 返回代理结果</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 创建一个切面</span><br><span class="line">        MyAspect myAspect &#x3D; new MyAspect();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 前增强</span><br><span class="line">        myAspect.check();</span><br><span class="line">        myAspect.except();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 在目标类上调用方法并传入参数，相当于调用 testDao中的方法</span><br><span class="line">        Object obj &#x3D; method.invoke(testDao,args);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 后增强</span><br><span class="line">        myAspect.log();</span><br><span class="line">        </span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>创建测试类<br>在test.java 包下创建Test类进行测试：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import dynamic.jdk.JDKDynamicProxy;</span><br><span class="line">import dynamic.jdk.TestDao;</span><br><span class="line">import dynamic.jdk.TestDaoImpl;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建代理对象</span><br><span class="line">        JDKDynamicProxy jdkDynamicProxy &#x3D; new JDKDynamicProxy();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 创建目标对象</span><br><span class="line">        TestDao testDao &#x3D; new TestDaoImpl();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 从代理对象中获取增强后的目标对象，该对象是一个被代理的对象，它会进入代理的逻辑方法 invoke中</span><br><span class="line">        TestDao testDaoAdvice &#x3D; (TestDao) jdkDynamicProxy.createProxy(testDao);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 执行方法</span><br><span class="line">        testDaoAdvice.save();</span><br><span class="line">        System.out.println(&quot;-----------&quot;);</span><br><span class="line">        testDaoAdvice.modify();</span><br><span class="line">        System.out.println(&quot;-----------&quot;);</span><br><span class="line">        testDaoAdvice.delete();</span><br><span class="line">        System.out.println(&quot;-----------&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="SpringStudy.assets/1636549473353.png" alt="1636549473353"></p><h4 id="4-2-2-CGLIB"><a href="#4-2-2-CGLIB" class="headerlink" title="4.2.2 CGLIB"></a>4.2.2 CGLIB</h4><p>从 4.2.1 节可知，JDK 动态代理必须提供接口才能使用，对于没有提供接口的类，只能采用 CGLIB 动态代理。<br>CGLIB（Code Generation Library）是一个高性能开源的代码生成包，采用非常底层的字节码技术，对指定的目标生成一个子类，并对子类进行增强。在 Spring Core 包中已经集成了 CGLIB 所需要的 jar 包。下面通过一个实例演示：</p><p>创建 CGLIB module</p><p>创建目标类<br>在 CGLIB module 下创建 dynamic.cglib包，在该包下创建 TestDao。<br>TestDao 的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package dynamic.cglib;</span><br><span class="line"></span><br><span class="line">public class TestDao &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void save() &#123;</span><br><span class="line">        System.out.println(&quot;保存&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void modify() &#123;</span><br><span class="line">        System.out.println(&quot;修改&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        System.out.println(&quot;删除&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>创建代理类<br>在 dynamic.cglib 包下创建代理类 CglibDynamicProxy，该类实现 MethodInterceptor 接口。<br>CglibDynamicProxy 的代码如下：</p></li><li><pre><code>package dynamic.cglib;</code></pre></li></ol><p>   import dynamic.jdk.MyAspect;<br>   import org.springframework.cglib.proxy.Enhancer;<br>   import org.springframework.cglib.proxy.MethodInterceptor;<br>   import org.springframework.cglib.proxy.MethodProxy;</p><p>   import java.lang.reflect.Method;</p><p>   public class CglibDynamicProxy implements MethodInterceptor {<br>       public Object createProxy(Object target){<br>           // 创建一个动态类对象，即增强类对象<br>           Enhancer enhancer = new Enhancer();</p><pre><code>       // 确定需要增强的类，设置其父类       enhancer.setSuperclass(target.getClass());       // 确定代理逻辑对象为当前对象，要求当前对象实现 MethodInterceptor 的方法       enhancer.setCallback(this);       // 返回创建的代理对象       return enhancer.create();   &#125;   public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;       // 创建一个切面       MyAspect myAspect = new MyAspect();       // 前增强       myAspect.check();       myAspect.except();       // 目标方法执行，返回代理结果       Object obj = methodProxy.invokeSuper(o,objects);       // 后增强       myAspect.log();       return obj;   &#125;</code></pre><p>   }</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**注**：这里的切面我们还是用的 JDK 代理时用到的切面</span><br><span class="line"></span><br><span class="line">1. 创建测试类</span><br><span class="line">   具体代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>  package dynamic.cglib;  public class Test &#123;      public static void main(String[] args) &#123;          // 创建代理对象          CglibDynamicProxy cdp = new CglibDynamicProxy();          // 创建目标对象          TestDao testDao = new TestDao();          // 获取增强后的目标对象          TestDao proxy = (TestDao) cdp.createProxy(testDao);          // 执行方法          proxy.delete();          System.out.println(&quot;---------&quot;);          proxy.save();          System.out.println(&quot;---------&quot;);          proxy.modify();          System.out.println(&quot;---------&quot;);      &#125;  &#125;  ```  输出如下  ![1636588836248](SpringStudy.assets/1636588836248.png)</code></pre><h4 id="4-3-基于代理类的-AOP-实现"><a href="#4-3-基于代理类的-AOP-实现" class="headerlink" title="4.3 基于代理类的 AOP 实现"></a>4.3 基于代理类的 AOP 实现</h4><p>从 4.2 节可知，在 Spring 中默认使用 JDK 动态代理实现 AOP 编程。使用 org.springframework.aop.framework.ProxyFactoryBean 创建代理是 Spring AOP 实现的基本方式。</p><p>一、通知类型<br>在讲解 ProxyFactoryBean 之前先了解以下 Spring 的通知类型。根据 Spring 中通知在目标类方法的连接点位置，通知可以分为 6 中类型。</p><ul><li><p>环绕通知<br>环绕通知实在目标方法执行前和执行后实施增强，可应用于日志记录、事物处理等功能。</p></li><li><p>前置通知<br>前置通知是在目标方法执行前实施增强，可应用于权限管理等功能。</p></li><li><p>后置返回通知<br>后置返回通知是在目标方法成功执行后实施增强，可应用于关闭流、删除临时文件等功能。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;#2-Spring-IoC&quot;&gt;2 Spring IoC&lt;/a&gt;&lt;br&gt;[2.1 Spring IoC 的基本概念](#2.1 Spring IoC 的基本概念)&lt;br&gt;[2.2 Spring IoC 容器](#2.2 Spring IoC 容器)&lt;br&gt;[2.2.1 BeanFactory](#2.2.1 BeanFactory)&lt;br&gt;[2.2.2 ApplicationContext](#2.2.2 ApplicationContext)&lt;br&gt;[2.3 依赖注入的类型](#2.3 依赖注入的类型)&lt;br&gt;[2.3.1 使用构造方法注入](#2.3.1 使用构造方法注入)&lt;br&gt;[2.3.2 使用属性的 setter 方法注入](#2.3.2 使用属性的 setter 方法注入)&lt;br&gt;[3 Spring Bean](#3 Spring Bean)&lt;br&gt;[3.1 Bean 的配置](#3.1 Bean 的配置)&lt;br&gt;[3.2 Bean 的实例化](#3.2 Bean 的实例化)&lt;br&gt;[3.2.1 构造方法实例化](#3.2.1 构造方法实例化)&lt;br&gt;[3.2.2 静态工厂实例化](#3.2.2 静态工厂实例化)&lt;br&gt;[3.2.3 实例工厂实例化](#3.2.3 实例工厂实例化)&lt;br&gt;[3.3 Bean 的作用域](#3.3 Bean 的作用域)&lt;br&gt;[3.3.1 singleton作用域](#3.3.1 singleton作用域)&lt;br&gt;[3.3.2 prototype作用域](#3.3.2 prototype作用域)&lt;br&gt;[3.4 Bean 的生命周期](#3.4 Bean 的生命周期)&lt;br&gt;[3.5 Bean 的装配方式](#3.5 Bean 的装配方式)&lt;br&gt;[3.5.1 基于 XML 配置的装配](#3.5.1 基于 XML 配置的装配)&lt;br&gt;[3.5.2 基于注解的装配](#3.5.2 基于注解的装配)&lt;br&gt;[4 Spring AOP](#4 Spring AOP)&lt;br&gt;[4.1 Spring AOP 的基本概念](#4.1 Spring AOP 的基本概念)&lt;br&gt;[4.1.1 AOP 的概念](#4.1.1 AOP 的概念)&lt;br&gt;[4.1.2 AOP 的术语](#4.1.2 AOP 的术语)&lt;br&gt;[4.2 动态代理](#4.2 动态代理)&lt;br&gt;[4.2.1 JDK 动态代理](#4.2.1 JDK 动态代理)&lt;br&gt;[4.2.2 CGLIB](#4.2.2 CGLIB)&lt;br&gt;[4.3 基于代理类的 AOP 实现](#4.3 基于代理类的 AOP 实现)&lt;/p&gt;</summary>
    
    
    
    <category term="Spring" scheme="http://jkraise.top/categories/Spring/"/>
    
    <category term="web框架" scheme="http://jkraise.top/categories/Spring/web%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="http://jkraise.top/tags/Spring/"/>
    
    <category term="web框架" scheme="http://jkraise.top/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue应用组件</title>
    <link href="http://jkraise.top/2022/07/23/Vue%E5%BA%94%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://jkraise.top/2022/07/23/Vue%E5%BA%94%E7%94%A8%E7%BB%84%E4%BB%B6/</id>
    <published>2022-07-23T05:30:41.000Z</published>
    <updated>2022-07-23T05:31:09.469Z</updated>
    
    <content type="html"><![CDATA[<p>Vue应用组件<br>watch和computed区别<br>生命周期&amp;&amp;钩子函数</p><a id="more"></a><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>不会监听data中的对象的属性变化</p><p>对象格式监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">family: &#123;</span><br><span class="line">handler(newVal，oldVal)&#123;</span><br><span class="line">console.log(newVal, oldVal);</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 当页面打开，自动触发一次</span><br><span class="line">immdiate: true,</span><br><span class="line">&#x2F;&#x2F; 是否深度监听对象的属性值，</span><br><span class="line">deep: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="watch和computed区别"><a href="#watch和computed区别" class="headerlink" title="watch和computed区别"></a>watch和computed区别</h5><ul><li><p>computed 监听不到 异步变化，</p></li><li><p>watch 就可以</p></li><li><p>watch 监听的是data的属性变化， computed 监听的是 data没有属性</p></li></ul><h3 id="动效"><a href="#动效" class="headerlink" title="动效"></a>动效</h3><ul><li><p>通过<code>transition</code>组件，在自定义元素的进场(Enter)，退场(Leave)，以及过程过渡的样式，</p><ul><li>v-enter-from 元素在进场之前的样式</li><li>v-enter-active 元素在进场过程中的样式</li><li>v-enter-to 元素在进场结束时的样式</li><li>元素退场</li><li>v-leave-from 元素在退场之前的样式</li><li>v-leave-active 愿随在退场过程中的样式</li><li>v-leave-to 元素在退场结束时的样式</li></ul></li><li><h5 id="自定义类名"><a href="#自定义类名" class="headerlink" title="自定义类名"></a>自定义类名</h5><p>因为在一个项目中，可能有多个需要过渡的元素，还互相不关联，这个时候，如果都用默认的类名，会发生样式的覆盖，因此要进行 类名自定义</p><p>只要给transiton组件添加一个属性 name=”自定义的前缀”</p><h5 id="条件与动态切换"><a href="#条件与动态切换" class="headerlink" title="条件与动态切换"></a>条件与动态切换</h5><p>和基本使用是一样的，<br>注意: 如果 多个元素进行动态切换，标签名还一样，就要给 每个标签添加一个属性 <code>key</code>  为了让<code>Vue</code>知道 这是两个元素，才能发生过渡效果</p><p>如果不写<code>key vue</code>在对比的时候 看到标签名一样 以为是一个元素 不会发生元素的更新 因此只对比得到不一样的东西(内容)进行更新 样式是加在元素身上才有过渡效果，所以这种情况 必须添加key属性</p></li></ul><h2 id="应用组件"><a href="#应用组件" class="headerlink" title="应用组件"></a>应用组件</h2><h3 id="vue-component-组件名称-配置对象-定义组件"><a href="#vue-component-组件名称-配置对象-定义组件" class="headerlink" title="vue.component(组件名称, 配置对象) 定义组件"></a>vue.component(组件名称, 配置对象) 定义组件</h3><ul><li>全局注册 <code>Vue.component(&quot;sub-cpent&quot;,&#123;&#125;)</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用组件</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;sub-cpent&gt;&lt;&#x2F;sub-cpent&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 全局注册</span><br><span class="line">Vue.component(&quot;sub-cpent&quot;,&#123;</span><br><span class="line">    data: function()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 任何 template 里面必须有root标签</span><br><span class="line">    template : &#39;&lt;h1&gt;&#123;&#123;&quot;count&quot;&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#x2F;&#x2F; computed、watch、methods 以及钩子函数等方法，</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一定要挂载前，注册组件</span><br><span class="line">let app &#x3D; new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p> 注意 在所有子组件中也是如此，也就是说这三个组件<em>在各自内部</em>也都可以相互使用 </p></blockquote><ul><li><p>局部注册（谁用注册谁）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var CpentA &#x3D; &#123;...&#125;</span><br><span class="line">var CpentB &#x3D; &#123;...&#125;</span><br><span class="line">var CpentC &#x3D; &#123;...&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    &#x2F;&#x2F; 局部注册</span><br><span class="line">    components: &#123;</span><br><span class="line">    &#39;cpent-a&#39;: CpentA,</span><br><span class="line">    &#39;cpent-b&#39;: CpentB,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 注意<strong>局部注册的组件在其子组件中<em>不可用</em></strong>。例如，如果你希望 <code>CpentA</code> 在 <code>CpentB</code> 中可用，则你需要这样写： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var CpentA &#x3D; &#123;...&#125;</span><br><span class="line"></span><br><span class="line">var CpentB &#x3D; &#123;</span><br><span class="line">components: &#123;</span><br><span class="line">&#39;cpent-a&#39;: CpentA,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li></li></ul><h3 id="生命周期-amp-amp-钩子函数"><a href="#生命周期-amp-amp-钩子函数" class="headerlink" title="生命周期&amp;&amp;钩子函数"></a>生命周期&amp;&amp;钩子函数</h3><ul><li><p>创建阶段</p><ul><li><code>beforeCreate()</code></li></ul></li><li><p><code>created()</code></p><p>  <strong>区别：</strong>这个<code>beforeCreate</code>函数，访问不了<code>data，methods,props</code>，created函数，则可以访问了，因为<code>data，methods，props</code>，已经创建好了,这个<code>created</code>函数，常用于发起Ajax请求，</p></li><li><p>挂载阶段</p><ul><li><code>beforemount()</code><ul><li>这个阶段，只是编译了模板，在内存中</li></ul></li><li><code>mounted</code><ul><li>这个阶段，把模板挂载到浏览器中的，页面渲染成功，</li><li>常常用于，操作dom，也是使用插件的位置</li></ul></li></ul></li><li><p>更新阶段</p></li></ul><ul><li><p><code>beforeUpdate</code></p><ul><li><code>updated</code></li></ul></li><li><p>监听的是页面上数据的变化</p></li></ul><ul><li><p>销毁阶段</p><ul><li><code>beforeDestroy()</code></li><li><code>destroyed()</code></li></ul></li></ul><p><strong>总结：1.created函数阶段，发起ajax请求，获取data</strong></p><p>​            <strong>2.mounted函数阶段，dom已经在浏览器渲染，可以操作dom，使用插件</strong></p><h2 id="应用API"><a href="#应用API" class="headerlink" title="应用API"></a>应用API</h2><h3 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h3><p>用法： <strong>注册或检索全局指令</strong></p><ul><li><p>example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createApp&#125; from &#39;vue&#39;</span><br><span class="line">const app &#x3D; createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注册指令</span><br><span class="line">app.directive(&#39;my-directive&#39;, &#123;</span><br><span class="line">    &#x2F;&#x2F; 指令是具有一组生命周期的钩子</span><br><span class="line">    &#x2F;&#x2F; 在绑定元素的attribute 或事件监听器被应用之前调用</span><br><span class="line">    created() &#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F; 绑定元素的父组件创建之前调用</span><br><span class="line">    beforeCreate() &#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F; 在绑定元素的父组件挂载之前调用</span><br><span class="line">    beforeMount() &#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F; 绑定元素的父组件被挂载时调用</span><br><span class="line">    mounted() &#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F; 在包含组件的 VNode 更新之前调用</span><br><span class="line">    beforeUpdate() &#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F; 在包含组件的 VNode 及其子组件的 VNode 更新之后调用</span><br><span class="line">    updated() &#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F; 在绑定元素的父组件卸载之前调用</span><br><span class="line">    beforeUnmount() &#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F; 卸载绑定元素的父组件时调用</span><br><span class="line">    unmounted() &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; getter, 如果已注册，则返回指令定义</span><br><span class="line">const myDirective &#x3D; app.directive(&#39;my-directive&#39;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue应用组件&lt;br&gt;watch和computed区别&lt;br&gt;生命周期&amp;amp;&amp;amp;钩子函数&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="http://jkraise.top/categories/vue/"/>
    
    <category term="前端框架" scheme="http://jkraise.top/categories/vue/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="vue" scheme="http://jkraise.top/tags/vue/"/>
    
    <category term="前端框架" scheme="http://jkraise.top/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>BOM 对象</title>
    <link href="http://jkraise.top/2022/07/23/BOM/"/>
    <id>http://jkraise.top/2022/07/23/BOM/</id>
    <published>2022-07-23T05:28:36.000Z</published>
    <updated>2022-07-23T06:09:24.005Z</updated>
    
    <content type="html"><![CDATA[<p>BOM 对象<br>顶级对象Window对象<br>this. 指向<br>location 对象<br>navigator对象<br>history 对象<br>JS执行机制（事件循环）<br>offset 偏移量<br>scroll 系列</p><a id="more"></a><h2 id="BOM-对象"><a href="#BOM-对象" class="headerlink" title="BOM 对象"></a>BOM 对象</h2><h3 id="顶级对象Window对象"><a href="#顶级对象Window对象" class="headerlink" title="顶级对象Window对象"></a>顶级对象Window对象</h3><ul><li><p>window.onload()     </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html加载后执行的方法</span></span><br></pre></td></tr></table></figure></li><li><p>DOMContentLoaded()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要dom加载完了，就执行此方法，不管js，css，img加载</span></span><br></pre></td></tr></table></figure></li><li><p>window.onresize 调整窗口大小事件</p></li><li><p>定时器</p><ul><li><p>setTimeout(调用函数，[延迟的毫秒数])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值 是Number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timeId = <span class="built_in">setTimeout</span>(调用函数，[延迟的毫秒数]) </span><br></pre></td></tr></table></figure></li><li><p>setinterval()  间隔定时器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setinterval(调用函数, 延时时间)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>停止定时器  clear.Timeout(TimeID)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 一般先清楚定时器，再定义定时器</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;start&quot;</span>&gt;</span>开启定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;end&quot;</span>&gt;</span>关闭定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> start = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.start&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> end = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.end&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&quot;p&quot;</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    start.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> seconds = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line">            p.innerHTML() = seconds;</span><br><span class="line">            </span><br><span class="line">        &#125;,10)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    end.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="this-指向"><a href="#this-指向" class="headerlink" title="this. 指向"></a>this. 指向</h3><ul><li>全局作用域下的，变量，函数，this指向都是window</li></ul><h3 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h3><ul><li>浏览器中的地址栏的对象</li></ul><h3 id="1-2-8-navigator对象"><a href="#1-2-8-navigator对象" class="headerlink" title="1.2.8. navigator对象"></a>1.2.8. navigator对象</h3><p>​    navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p><p>下面前端代码可以判断用户那个终端打开页面，实现跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;&quot;</span>;     <span class="comment">//手机</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;&quot;</span>;     <span class="comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h3><p>window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p><table><thead><tr><th align="left">history对象方法</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">back()</td><td align="left">可以后推</td></tr><tr><td align="left">forward()</td><td align="left">前进功能</td></tr><tr><td align="left">go(参数)</td><td align="left">前进后退 1 前进，-1 后推</td></tr></tbody></table><p>history对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到。</p><h3 id="JS执行机制（事件循环）"><a href="#JS执行机制（事件循环）" class="headerlink" title="JS执行机制（事件循环）"></a>JS执行机制（事件循环）</h3><ul><li><p>同步任务</p><ul><li>同步任务都在主线程上执行， 形成一个执行栈</li></ul></li><li><p>异步任务</p><ul><li>js的异步是通过回调函数实现的</li><li>一般而言，异步任务有以下三种类型，</li><li>普通事件，如click，resize 等</li><li>资源加载，如load，error等</li><li>定时器， 包括setInterval， setTimeout等</li></ul><p>异步任务相关 <strong>回调函数</strong>添加到 <strong>任务队列中</strong></p></li></ul><h3 id="offset-偏移量"><a href="#offset-偏移量" class="headerlink" title="offset 偏移量"></a>offset 偏移量</h3><ul><li><p><code>offsetParent</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取的是某一个元素的最近的定位父元素</span><br><span class="line">let Father &#x3D; son.offsetParent;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>offsetTop</code> &amp;&amp; <code>offsetLeft</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 相对于定位父元素的左边的偏移，和上边的偏移</span><br><span class="line">let sTop &#x3D; son.offsetTop;</span><br><span class="line">let sLeft &#x3D; son.offsetLeft;</span><br></pre></td></tr></table></figure></li><li><p><code>offsetWidth</code> &amp;&amp; <code>offsetHeight</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自己元素的大小  (padding，border 内容)</span><br><span class="line">let sWidth &#x3D; son.offsetWidth;</span><br><span class="line">let sHeight &#x3D; son.offsetHeight;</span><br></pre></td></tr></table></figure></li><li><p>style </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">        content: &#x27;&#x27;;</span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        background-color: bisque;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 只有数字，没有单位</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(div.offsetWidth);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 字符串 类型，带单位</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(div.style.width);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// offsetWidth  只读</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// element.style.样式属性 可读可写</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            div.style.width = <span class="string">&quot;400px&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 获取计算后的样式</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 只能是window 调用</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> bgColor = <span class="built_in">window</span>.getComputedStyle(div).backgroundColor;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(bgColor);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> afBgColor = <span class="built_in">window</span>.getComputedStyle(div,<span class="string">&#x27;after&#x27;</span>).backgroundColor;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(afBgColor);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>鼠标在盒子中的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; e.pageX - 盒子.offsetLeft;</span><br><span class="line">y &#x3D; e.pagey - 盒子.offsetTop;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="scroll-系列"><a href="#scroll-系列" class="headerlink" title="scroll 系列"></a>scroll 系列</h3><ul><li><strong>scrollWidth和scrollHeight</strong></li></ul><p>scrollHeight ：元素中<strong>内容的实际高</strong>，并不是元素的宽高;当元素中没有内容，或内容很少时，才得到元素的宽高，不包含border。</p><p><img src="BOM.assets/1636545831520.png" alt="1636545831520"></p><ul><li><strong>scrollLeft/scrollTop</strong></li></ul><p>计算元素卷曲出去的left和top值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;BOM 对象&lt;br&gt;顶级对象Window对象&lt;br&gt;this. 指向&lt;br&gt;location 对象&lt;br&gt;navigator对象&lt;br&gt;history 对象&lt;br&gt;JS执行机制（事件循环）&lt;br&gt;offset 偏移量&lt;br&gt;scroll 系列&lt;/p&gt;</summary>
    
    
    
    <category term="js" scheme="http://jkraise.top/categories/js/"/>
    
    <category term="前端" scheme="http://jkraise.top/categories/js/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="js" scheme="http://jkraise.top/tags/js/"/>
    
    <category term="前端" scheme="http://jkraise.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue组件通信</title>
    <link href="http://jkraise.top/2022/07/23/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://jkraise.top/2022/07/23/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</id>
    <published>2022-07-23T05:28:36.000Z</published>
    <updated>2022-07-23T05:29:16.535Z</updated>
    
    <content type="html"><![CDATA[<p>vue组件通信</p><a id="more"></a><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="父给子组件通信"><a href="#父给子组件通信" class="headerlink" title="父给子组件通信"></a>父给子组件通信</h3><ul><li><p>子组件通过<code>props</code>属性接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> father = &#123;</span><br><span class="line">template: </span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;button @click=&quot;handleClick&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;!-- 静态传值  zhangsan --&gt;</span></span><br><span class="line"><span class="string">&lt;son name=&quot;name&quot;&gt;&lt;/son&gt; </span></span><br><span class="line"><span class="string">&lt;!-- 动态传值  zhangsi --&gt; </span></span><br><span class="line"><span class="string">&lt;son :name=&quot;name&quot;&gt;&lt;/son&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleClick ()&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&quot;zhangsi&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> son = &#123;</span><br><span class="line">props: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    template: </span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>props 对象写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">title: String,</span><br><span class="line">    likes: Number,</span><br><span class="line">    isPublished: Boolean,</span><br><span class="line">    commentIds: Array,</span><br><span class="line">    author: Object,</span><br><span class="line">    callback: Function,</span><br><span class="line">    contactsPromise: Promise, &#x2F;&#x2F; or any other constructor</span><br><span class="line">    &#x2F;&#x2F; 多个可能的类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">name: &#123;</span><br><span class="line">&#x2F;&#x2F; 类型定义</span><br><span class="line">type: String,</span><br><span class="line">&#x2F;&#x2F; 必传字段</span><br><span class="line">required: true,</span><br><span class="line">default: &quot;zhangsan&quot;</span><br><span class="line">&#125;,</span><br><span class="line">age: &#123;</span><br><span class="line">type: Nubmer,</span><br><span class="line">&#x2F;&#x2F; 默认值 </span><br><span class="line">default: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 自定义验证函数</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator(value) &#123;</span><br><span class="line">        &#x2F;&#x2F; 这个值必须与下列字符串中的其中一个相匹配</span><br><span class="line">        return [&#39;success&#39;, &#39;warning&#39;, &#39;danger&#39;].includes(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 具有默认值的函数</span><br><span class="line">    propG: &#123;</span><br><span class="line">      type: Function,</span><br><span class="line">      &#x2F;&#x2F; 与对象或数组的默认值不同，这不是一个工厂函数——这是一个用作默认值的函数</span><br><span class="line">      default() &#123;</span><br><span class="line">        return &#39;Default function&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>必传变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name: &#123;</span><br><span class="line"><span class="comment">// 类型定义</span></span><br><span class="line">type: <span class="built_in">String</span>,</span><br><span class="line"><span class="comment">// 必传字段</span></span><br><span class="line">required: <span class="literal">true</span>,</span><br><span class="line"><span class="keyword">default</span>: <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age: &#123;</span><br><span class="line">type: Nubmer,</span><br><span class="line"><span class="comment">// 默认值 </span></span><br><span class="line"><span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="子给父组件通信"><a href="#子给父组件通信" class="headerlink" title="子给父组件通信"></a>子给父组件通信</h3><ul><li><p>通过父组件传递方法给子组件</p></li><li><p>子组件通过<code>this.$emit(&quot;方法名&quot;)</code> 触发父组件传递过来方法，</p></li><li><p><code>this.$emit(&quot;方法名&quot;, 数据)</code>的第二个参数把数据传递给父组件</p></li><li><p>父给子传递方法 </p><ul><li><p><code>hClick</code> 自定义事件</p></li><li><p><code>this.$emit(&quot;hClick&quot;)</code> 触发事件</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var father &#x3D; &#123;</span><br><span class="line">template: </span><br><span class="line">&#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;handleClick&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- 静态传值  zhangsan --&gt;</span><br><span class="line">&lt;son name&#x3D;&quot;name&quot;&gt;&lt;&#x2F;son&gt; </span><br><span class="line">&lt;!-- 动态传值  zhangsi --&gt; </span><br><span class="line">&lt;son :name&#x3D;&quot;name&quot; @hClick&#x3D;&quot;handleClick&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &quot;zhangsan&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleClick ()&#123;</span><br><span class="line">            this.name &#x3D; &quot;zhangsi&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var son &#x3D; &#123;</span><br><span class="line">    props: [&#39;name&#39;],</span><br><span class="line">    template: </span><br><span class="line">        &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h3><ul><li><p>1.创建一个gege组件，一个didi组件</p></li><li><p>2.创建 <code>eventBus</code>对象，<code>let eventBus = new Vue()</code></p></li><li><p>3.gege 组件通过<code>eventBus.$emit(&quot;自定义事件&quot;, 数据)</code> </p></li><li><p>4.didi 组件通过<code>eventBus.$on(&quot;自定义事件&quot;, callbackFn)</code> </p></li><li><pre><code class="javascript">let eventBus = new Vue();var gege = &#123;    data ()&#123;        return &#123;            name: &#39;gege&#39;,        &#125;    &#125;,    methods: &#123;        handlePass ()&#123;            eventBus.$emit(&#39;receive&#39;, this.name)        &#125;    &#125;&#125;var didi = &#123;    data ()&#123;        return &#123;            name: &#39;didi&#39;,        &#125;    &#125;,    methods: &#123;    &#125;,    created ()&#123;        handlePass ()&#123;            // 监听方法            eventBus.$on(&#39;receive&#39;, function(res)&#123;                console.log(res)            &#125;)        &#125;    &#125;&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 跨级组件通讯</span><br><span class="line"></span><br><span class="line">yeye组件，想给sunzi组件通信</span><br><span class="line"></span><br><span class="line">- 爷爷组件</span><br><span class="line"></span><br><span class="line">  - provide , 数据提供者</span><br><span class="line">- inject ,   数据接收者，</span><br><span class="line">  - yeye组件不需要知道哪些sunzi组件使用了它 provide 的 property</span><br><span class="line">  - sunzi组件不需要知道 inject 的 property 来自哪</span><br><span class="line">  </span><br></pre></td></tr></table></figure>const app = Vue.createApp(&#123;&#125;)app.component(&#39;grandfa&#39;, &#123;  data() &#123;    return &#123;      todos: [&#39;Feed a cat&#39;, &#39;Buy tickets&#39;],      name: &quot;zhangsan&quot;    &#125;  &#125;,  methods: &#123;      handleChange()&#123;          this.name = &quot;lisi&quot;      &#125;  &#125;  provide: &#123;      // 返回 this的属性值， 就必须返回对象      return &#123;    name: &#123;name: this.name&#125;    getname: ()=&gt;&#123;        &#123;username: this.name&#125;     &#125;  &#125;,  template: `    &lt;div&gt;      &#123;&#123; todos.length &#125;&#125;      &lt;!-- 模板的其余部分 --&gt;      &lt;button @click=&quot;handleChange&quot;&gt;&lt;/button&gt;    &lt;/div&gt;  ` &#125;)app.component(&#39;grandson&#39;, &#123;  inject: [&quot;name&quot;, &quot;getname&quot; ],  computed: &#123;      username ()&#123;          return this.getname().username      &#125;  &#125;  template: `    &lt;div&gt;      &#123;&#123; todos.length &#125;&#125;      &lt;!-- 模板的其余部分 --&gt;  &lt;/div&gt;  ` &#125;)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 插槽</span><br><span class="line"></span><br><span class="line">具名插槽</span><br><span class="line"></span><br><span class="line">- 具有名字的插槽 </span><br><span class="line"></span><br><span class="line">- 使用 &lt;slot&gt; 中的 &quot;name&quot; 属性绑定元素</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">        &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">            &lt;grandfa&gt;</span><br><span class="line">    </span><br><span class="line">                &lt;template #mySolt&gt;</span><br><span class="line">                    &lt;h2&gt;我在哪里呢1&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;&#x2F;template&gt;</span><br><span class="line">                &lt;template #default&gt;</span><br><span class="line">                    &lt;h3&gt;laoer&lt;&#x2F;h3&gt;</span><br><span class="line">                &lt;&#x2F;template&gt;</span><br><span class="line">            &lt;&#x2F;grandfa&gt;</span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script src&#x3D;&quot;.&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">        &lt;script type&#x3D;&quot;&quot; &gt;&lt;&#x2F;script&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">            Vue.component(&#39;grandfa&#39;, &#123;</span><br><span class="line">    </span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        todos: [&#39;Feed a cat&#39;, &#39;Buy tickets&#39;],</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    handleChange(res) &#123;</span><br><span class="line">                        eventBus.$emit(&quot;transmini&quot;, this.todos)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                template: &#96;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                    &lt;hr&gt;&lt;&#x2F;hr&gt;</span><br><span class="line">                    &lt;h1&gt;具名插槽&lt;&#x2F;h1&gt;</span><br><span class="line">                    &lt;slot name&#x3D;&quot;mySolt&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">                    &lt;hr&gt;&lt;&#x2F;hr&gt;</span><br><span class="line">    </span><br><span class="line">                    &lt;h1&gt;默认插槽&lt;&#x2F;h1&gt;</span><br><span class="line">                    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">                    &lt;hr&gt;&lt;&#x2F;hr&gt;</span><br><span class="line">    </span><br><span class="line">                    &lt;grandson  @handle&#x3D;&quot;handleChange&quot;&gt;&lt;&#x2F;grandson&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &#96;,</span><br><span class="line">               </span><br><span class="line">    </span><br><span class="line">            &#125;)</span><br><span class="line">    </span><br><span class="line">            Vue.component(&#39;grandson&#39;, &#123;</span><br><span class="line">    </span><br><span class="line">                props: [&quot;name&quot;, &quot;handle&quot;],</span><br><span class="line">                data ()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        list: null,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                template: &#96;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                    </span><br><span class="line">                    &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点击事件&lt;&#x2F;button&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;list&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">                    </span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &#96;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    handleClick()&#123;</span><br><span class="line">                        this.$emit(&quot;handle&quot;, &quot;数据1&quot;)</span><br><span class="line">                        console.log(1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                </span><br><span class="line">    </span><br><span class="line">            &#125;)</span><br><span class="line">    </span><br><span class="line">            new Vue(&#123;</span><br><span class="line">                el: &quot;#app&quot;,</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>​    作用域插槽</p><ul><li><p>父组件对子组件加工处理</p></li><li><p>既可以复用子组件的slot，又可以使slot内容不一致</p></li><li><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;grandfa&gt;            &lt;template #mySolt&gt;                &lt;h2&gt;我在哪里呢1&lt;/h2&gt;            &lt;/template&gt;            &lt;template #default&gt;                &lt;h3&gt;laoer&lt;/h3&gt;            &lt;/template&gt;        &lt;/grandfa&gt;</code></pre></li></ul><pre><code>  &lt;/div&gt;  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;  &lt;script type=&quot;&quot; &gt;&lt;/script&gt;  &lt;script&gt;      Vue.component(&#39;grandfa&#39;, &#123;          data() &#123;              return &#123;              &#125;          &#125;,          methods: &#123;          &#125;,          template: `              &lt;div&gt;              &lt;grandson  @handle=&quot;handleChange&quot;&gt;                  &lt;!----作用域插槽-----&gt;                  &lt;template slot-scope=&quot;slotProps&quot;&gt;                  &lt;h4&gt;&#123;&#123;slotProps&#125;&#125;&lt;/h4&gt;                      &lt;ul&gt;                      &lt;li v-for=&quot;item in slotProps.list&quot;&gt;                          &#123;&#123;item&#125;&#125;                      &lt;/li&gt;                      &lt;/ul&gt;                  &lt;/template&gt;              &lt;/grandson&gt;              &lt;/div&gt;          `,      &#125;)      Vue.component(&#39;grandson&#39;, &#123;          props: [&quot;name&quot;, &quot;handle&quot;],          data ()&#123;              return &#123;                  list: [1,23,4234,32432,2432,43,2,4,32],              &#125;          &#125;,          template: `              &lt;div&gt;              &lt;slot :list=&quot;list&quot;&gt;&lt;/slot&gt;              &lt;/div&gt;          `,          methods: &#123;              handleClick()&#123;                  this.$emit(&quot;handle&quot;, &quot;数据1&quot;)                  console.log(1);              &#125;          &#125;,      &#125;)      new Vue(&#123;          el: &quot;#app&quot;,      &#125;)  &lt;/script&gt;</code></pre>  </body>  </html>  ```]]></content>
    
    
    <summary type="html">&lt;p&gt;vue组件通信&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="http://jkraise.top/categories/vue/"/>
    
    <category term="前端框架" scheme="http://jkraise.top/categories/vue/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="vue" scheme="http://jkraise.top/tags/vue/"/>
    
    <category term="前端框架" scheme="http://jkraise.top/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>面试题之rpc和http</title>
    <link href="http://jkraise.top/2022/07/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bhttp%E5%92%8Crpc/"/>
    <id>http://jkraise.top/2022/07/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bhttp%E5%92%8Crpc/</id>
    <published>2022-07-23T05:25:11.000Z</published>
    <updated>2022-07-23T06:17:16.262Z</updated>
    
    <content type="html"><![CDATA[<p>面试题之rpc和http</p><a id="more"></a><h3 id="rpc和http做比较"><a href="#rpc和http做比较" class="headerlink" title="rpc和http做比较"></a>rpc和http做比较</h3><h4 id="rpc的理解"><a href="#rpc的理解" class="headerlink" title="rpc的理解"></a>rpc的理解</h4><ul><li>RPC, 英文全名remote procedure call 即远程过程掉调用</li><li>就是说一个应用部署在A服务器上，想要调用B服务器上应用提供的方法</li><li>由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据</li><li>RPC就是要像调用本地的函数一样去调用远程函数</li></ul><h4 id="eq：1-那为啥不能用HTTP请求，要用RPC调用呢"><a href="#eq：1-那为啥不能用HTTP请求，要用RPC调用呢" class="headerlink" title="eq：1.那为啥不能用HTTP请求，要用RPC调用呢?"></a>eq：1.那为啥不能用HTTP请求，要用RPC调用呢?</h4><ul><li><p>首先，rpc是一个完整的远程调用方案，他通常包括通讯协议和序列化协议</p></li><li><p>其中，通信协议包含http协议，（如gRPC使用HTTP2）、自定义报文的tcp协议（如dubbo）</p></li><li><p>序列化协议包含基于文本编码的xml、json，基于二进制编码的protobuf、hessian等</p></li><li><p>而HTTP只是一个通信协议，不是一个完整的远程控制协议</p></li><li><p>也就是说，HTTP和RPC不是对等的概念，用来比较不合适</p></li></ul><h4 id="eq：2-为什么有些后端子系统之间是使用自定义tcp协议的rpc来做进程通信？而不是使用http协议呢？"><a href="#eq：2-为什么有些后端子系统之间是使用自定义tcp协议的rpc来做进程通信？而不是使用http协议呢？" class="headerlink" title="eq：2.为什么有些后端子系统之间是使用自定义tcp协议的rpc来做进程通信？而不是使用http协议呢？"></a>eq：2.为什么有些后端子系统之间是使用自定义tcp协议的rpc来做进程通信？而不是使用http协议呢？</h4><ul><li><p>首先，http协议是支持连接池复用的，也就是建立一定数量的连接不断开，并不会频繁的创建和销毁连接</p></li><li><p>然后，http也可以使用protobuf这种二进制编码协议对内容进行编码</p></li><li><p>也就是说连接建立与断开的开销和序列化协议并不是主要影响因素 </p></li><li><p>二者最大的区别还是在<strong>传输协议</strong>上 </p></li><li><p>http的传输协议中header部分有很多<strong>冗余</strong>的部分，像Content-Type、Last-Modified、Expires等 </p></li><li><p>即使http body是使用二进制编码协议，header头的键值对却用了文本编码，非常占用字节数 </p></li><li><p>而自定义的tcp协议，可以精简传输内容，传输效率更高。比如下面的自定义tcp协议的报文： </p></li><li><pre><code class="python">1-4 byte，length5-8 byte，type9-16 byte，package_id17-length+16 byte，package_data</code></pre></li><li><p>报头占用的字节数也就只有16个byte，大大地减少了传输内容。高并发情况下，少几个字节，乘以巨大的请求数量，能带来庞大的收益 </p></li><li><p>因此，对于性能要求比较高的系统来说，通常使用自定义tcp协议的rpc来做后端进程通信 </p></li><li><p>其实使用http协议比较多的还是前后端的通信，原因在于主流网页游览器都支持http协议，而且http在缓存、幂等重试乃至cookie这种浏览器安全相关的方面做了很多功夫 </p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;面试题之rpc和http&lt;/p&gt;</summary>
    
    
    
    <category term="面试题" scheme="http://jkraise.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="rpc" scheme="http://jkraise.top/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/rpc/"/>
    
    
    <category term="rpc" scheme="http://jkraise.top/tags/rpc/"/>
    
    <category term="http" scheme="http://jkraise.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>jdk8 之后，接口提供了默认方法</title>
    <link href="http://jkraise.top/2021/09/07/javaInterface/"/>
    <id>http://jkraise.top/2021/09/07/javaInterface/</id>
    <published>2021-09-07T14:47:21.000Z</published>
    <updated>2021-09-07T14:52:05.910Z</updated>
    
    <content type="html"><![CDATA[<p> jdk8 之后，接口提供了默认方法</p><a id="more"></a><h4 id="jdk8-之后，接口提供了默认方法"><a href="#jdk8-之后，接口提供了默认方法" class="headerlink" title="jdk8 之后，接口提供了默认方法"></a>jdk8 之后，接口提供了默认方法</h4><ul><li><p>在接口里 可以写 有实现体的方法了，可以被重写，但是不强制</p></li><li><p>如果实现的多个接口有相同名字的默认方法，实现类必须重写</p><p><img src="https://qny.jkraise.top/javainterface/1619488312119.png" alt="1619488312119"></p></li></ul><h4 id="jdk8-之后，接口提供了静态方法"><a href="#jdk8-之后，接口提供了静态方法" class="headerlink" title="jdk8 之后，接口提供了静态方法"></a>jdk8 之后，接口提供了静态方法</h4><p><img src="https://qny.jkraise.top/javainterface/1619489768318.png" alt="1619489768318"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; jdk8 之后，接口提供了默认方法&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://jkraise.top/categories/java/"/>
    
    
    <category term="jdk8 之后，接口提供了默认方法" scheme="http://jkraise.top/tags/jdk8-%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%8E%A5%E5%8F%A3%E6%8F%90%E4%BE%9B%E4%BA%86%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker指令&amp;&amp; 容器使用</title>
    <link href="http://jkraise.top/2021/09/07/docker/"/>
    <id>http://jkraise.top/2021/09/07/docker/</id>
    <published>2021-09-07T14:39:19.000Z</published>
    <updated>2021-09-07T14:39:44.082Z</updated>
    
    <content type="html"><![CDATA[<p>Docker指令&amp;&amp; 容器使用</p><a id="more"></a><h3 id="镜像images"><a href="#镜像images" class="headerlink" title="镜像images"></a>镜像images</h3><ol><li>获取镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dock pull [选项] [Docker Registry 地址[:端口号]&#x2F;]仓库名[:标签]</span><br></pre></td></tr></table></figure></li><li>运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker run -it --rm ubuntu:18.04 bash</span><br><span class="line">root@e7009c6ce357:&#x2F;# cat &#x2F;etc&#x2F;os-release</span><br><span class="line">NAME&#x3D;&quot;Ubuntu&quot;</span><br><span class="line">VERSION&#x3D;&quot;18.04.1 LTS (Bionic Beaver)&quot;</span><br><span class="line">ID&#x3D;ubuntu</span><br><span class="line">ID_LIKE&#x3D;debian</span><br><span class="line">PRETTY_NAME&#x3D;&quot;Ubuntu 18.04.1 LTS&quot;</span><br><span class="line">VERSION_ID&#x3D;&quot;18.04&quot;</span><br><span class="line">HOME_URL&#x3D;&quot;https:&#x2F;&#x2F;www.ubuntu.com&#x2F;&quot;</span><br><span class="line">SUPPORT_URL&#x3D;&quot;https:&#x2F;&#x2F;help.ubuntu.com&#x2F;&quot;</span><br><span class="line">BUG_REPORT_URL&#x3D;&quot;https:&#x2F;&#x2F;bugs.launchpad.net&#x2F;ubuntu&#x2F;&quot;</span><br><span class="line">PRIVACY_POLICY_URL&#x3D;&quot;https:&#x2F;&#x2F;www.ubuntu.com&#x2F;legal&#x2F;terms-and-policies&#x2F;privacy-policy&quot;</span><br><span class="line">VERSION_CODENAME&#x3D;bionic</span><br><span class="line">UBUNTU_CODENAME&#x3D;bionic</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><strong>docker run 就是运行容器的命令</strong></p><ul><li><code>-it</code> ：这是两个参数， 一个是<code>-i</code>  交互式操作，一个是’-t’ 终端，我们这里打算 进入<code>bash</code> 执行一些命令并</li><li>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间</li><li>ubuntu:18.04：这是指用 ubuntu:18.04 镜像为基础来启动容器。</li><li>bash：放在镜像名后的是 命令，这里我们希望有个交互式 Shell，因此用的是 bash</li><li>exit 退出了这个容器</li></ul><h5 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://qny.jkraise.top/docker/642_1.png"></p><h5 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ... -v 主机目录:容器中的目录 ...</span><br></pre></td></tr></table></figure><h5 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 源目录 目标目录</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker images -----&gt; 查看已下载的镜像</span><br><span class="line">docker rmi 镜像名称:标签名      -----&gt; 删除已下载镜像</span><br><span class="line">docker search 镜像   -----&gt;   从官方仓库（hub.docker.com）查找镜像</span><br><span class="line">docker pull 镜像名称:标签名   -----&gt; 标签名默认是 latest，代表最新版本。</span><br><span class="line">docker pull 镜像名 ------&gt;下载最新版</span><br><span class="line">docker ps      -----&gt;  列出运行中的容器（运行中）</span><br><span class="line">docker ps -a  ------&gt; 列出所有的容器（运行、未运行）</span><br><span class="line">docker ps -a 查看所有的容器</span><br><span class="line">CONTAINER ID   IMAGE        COMMAND     CREATED         STATUS         PORTS     NAMES</span><br><span class="line">7c291fb47b70   python:3.9   &quot;python3&quot;   4 minutes ago   Up 4 minutes             priceless_almeida</span><br><span class="line">docker stop 容器名称id  -----&gt;  停止容器</span><br><span class="line">docker start 容器名称id   -----&gt;  启动容器</span><br><span class="line">docker start -i 容器的id  ---&gt;在将一个停止的容器运行起来的同时，指定交互模式</span><br><span class="line">docker restart 容器名称id  -----&gt;  重启容器</span><br><span class="line">docker rm 容器id   -----&gt; 删除 已经停止运行的容器</span><br><span class="line">docker rm $(docker ps -a -q)    -----&gt; 删除所有停止运行的容器 （慎用）</span><br><span class="line">docker rm -f 容器的id  -----&gt; 强制删除容器 （无论是否停止运行）</span><br><span class="line">docker rmi  镜像的id</span><br><span class="line">docker run 镜像名字:版本  -----&gt;创建一个容器且运行</span><br><span class="line">                -it ---&gt;交互模式</span><br><span class="line">docker exec  执行容器中的指令</span><br></pre></td></tr></table></figure><p><strong>Dockerfile 参数</strong></p><p>FROM：指定基础镜像，必须为第一个命令<br>MAINTAINER: 维护者信息<br>ENV：设置环境变量<br>RUN：构建镜像时执行的命令<br>ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget<br>EXPOSE：指定于外界交互的端口<br>VOLUME：用于指定持久化目录<br>WORKDIR：工作目录，类似于cd命令<br><img src="https://qny.jkraise.top/docker/643_1.png"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>使用MySQL镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name&#x3D;mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql:5.5</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>–name=mysql：为容器指定一个名称为mysql</li><li>-p 3306:3306：将容器的（后面的3306） 3306 端口映射到主机的（前面的3306） 3306端口。</li><li>-d：后台运行容器，并返回容器ID。</li><li>-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码为123456。</li><li>mysql:5.5 要使用的镜像的名称</li></ul><h4 id="网络-指令"><a href="#网络-指令" class="headerlink" title="网络 指令"></a>网络 指令</h4><p><strong>查看 网络列表</strong><br><code>docker network ls</code><br><img src="https://qny.jkraise.top/docker/645_1.png"></p><p><strong>当我们在使用docker-compose构建服务时，会自动创建一个新的网络如下</strong><br><strong>查看这个网络中所有的容器ip以及其他信息</strong><br><code>docker network inspect 网络id</code><br><img src="https://qny.jkraise.top/docker/644_1.png"></p><p><strong>新建一个网络</strong><br><code>$ docker network create -d bridge my-net</code></p><p><strong>运行容器连接到my-net 网络</strong><br><code>docker run --rm -it --network my-net my_flask:1.0 bash</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker指令&amp;amp;&amp;amp; 容器使用&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://jkraise.top/categories/Docker/"/>
    
    
    <category term="Docker指令&amp;&amp; 容器使用" scheme="http://jkraise.top/tags/Docker%E6%8C%87%E4%BB%A4-%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Compose</title>
    <link href="http://jkraise.top/2021/09/07/docker03/"/>
    <id>http://jkraise.top/2021/09/07/docker03/</id>
    <published>2021-09-07T14:32:57.000Z</published>
    <updated>2021-09-07T14:33:51.168Z</updated>
    
    <content type="html"><![CDATA[<p>docker-Compose</p><a id="more"></a><h3 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h3><ol><li>创建docker-compose.yml <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">    redis:</span><br><span class="line">        image: redis</span><br><span class="line">        expose:</span><br><span class="line">            - 6379</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;6389:6379&quot;</span><br><span class="line">    mysql:</span><br><span class="line">        image: mysql:5.5</span><br><span class="line">        expose:</span><br><span class="line">            - 3306</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;3307:3306&quot;</span><br><span class="line">        environment:</span><br><span class="line">            MYSQL_ROOT_PASSWORD: python</span><br><span class="line">            MYSQL_USER: root</span><br><span class="line">        volumes:</span><br><span class="line">            - .&#x2F;02_mysql:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">    flask:</span><br><span class="line">        build: .&#x2F;01_flask</span><br><span class="line">        volumes:</span><br><span class="line">            - .&#x2F;01_flask&#x2F;project:&#x2F;home&#x2F;project</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;5000:5000&quot;</span><br><span class="line">        depends_on:</span><br><span class="line">            - mysql</span><br><span class="line">            - redis</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="一些常用的命令"><a href="#一些常用的命令" class="headerlink" title="一些常用的命令"></a>一些常用的命令</h4></li></ol><ul><li>生成容器并运行<ul><li><code>docker-compose up</code></li></ul></li><li>删除容器 <ul><li><code>docker-compose down</code></li></ul></li><li>开启容器并运行<ul><li><code>docker-compose start</code></li></ul></li><li>停止容器运行<ul><li><code>docker-compose stop</code></li></ul></li></ul><p><strong>depends_on</strong><br><img src="https://qny.jkraise.top/docker03/647_1.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;docker-Compose&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://jkraise.top/categories/Docker/"/>
    
    
    <category term="Docker-Compose" scheme="http://jkraise.top/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>java 跨包使用 &amp;&amp; 泛型</title>
    <link href="http://jkraise.top/2021/09/07/javaday02/"/>
    <id>http://jkraise.top/2021/09/07/javaday02/</id>
    <published>2021-09-07T14:30:40.000Z</published>
    <updated>2021-09-07T14:31:04.487Z</updated>
    
    <content type="html"><![CDATA[<p>java 跨包使用 &amp;&amp; 泛型</p><a id="more"></a><h3 id="java-跨包使用"><a href="#java-跨包使用" class="headerlink" title="java 跨包使用"></a>java 跨包使用</h3><p><img src="https://qny.jkraise.top/java%E8%B7%A8%E5%8C%85%E4%BD%BF%E7%94%A8/1618281252388.png" alt="1618281252388"></p><h3 id="集合与数组的区别"><a href="#集合与数组的区别" class="headerlink" title="集合与数组的区别"></a>集合与数组的区别</h3><p>数组 长度不能修改</p><p>list   长度可以改变</p><h3 id="Arraylist"><a href="#Arraylist" class="headerlink" title="Arraylist"></a>Arraylist</h3><h3 id="泛型-作为约束集合里的类型"><a href="#泛型-作为约束集合里的类型" class="headerlink" title="泛型 作为约束集合里的类型"></a>泛型 作为约束集合里的类型</h3><p><img src="https://qny.jkraise.top/java%E8%B7%A8%E5%8C%85%E4%BD%BF%E7%94%A8/1618303552657.png" alt="1618303552657"></p><h4 id="ArrayList-方法"><a href="#ArrayList-方法" class="headerlink" title="ArrayList 方法"></a>ArrayList 方法</h4><ul><li><p>增 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arrLi02.add(&quot;content&quot;);</span><br><span class="line">arrLi02.add(3,&quot;conge&quot;); &#x2F;&#x2F; 根据下标 添加</span><br></pre></td></tr></table></figure><p><strong>不能跨界添加</strong></p></li><li><p>删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addLi02.remove(&quot;2&quot;); &#x2F;&#x2F; 根据元素</span><br><span class="line">addLi02.remove(0,&quot;2&quot;); &#x2F;&#x2F; 根据下标 删除元素</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addLi02.set(0,&quot;改&quot;); &#x2F;&#x2F; 参数1 下标， 参数2 元素</span><br></pre></td></tr></table></figure></li><li><p>查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addLi02.get(0); &#x2F;&#x2F; 参数1 下标，</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 循环打印</span><br><span class="line">for (int i &#x3D; 0; i &lt; addLi02.size() ; i++) &#123;</span><br><span class="line">System.out.println(addLi02.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Java ArrayList forEach() 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建一个数组</span><br><span class="line">        ArrayList&lt;Integer&gt; numbers &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 往数组中添加元素</span><br><span class="line">        numbers.add(1);</span><br><span class="line">        numbers.add(2);</span><br><span class="line">        numbers.add(3);</span><br><span class="line">        numbers.add(4);</span><br><span class="line">        System.out.println(&quot;ArrayList: &quot; + numbers);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; forEach 循环打印</span><br><span class="line">         for (Integer integer : numbers) &#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 所有元素乘以 10</span><br><span class="line">        System.out.print(&quot;更新 ArrayList: &quot;);</span><br><span class="line">       </span><br><span class="line">        &#x2F;&#x2F; 将 lambda 表达式传递给 forEach</span><br><span class="line">        numbers.forEach((e) -&gt; &#123;</span><br><span class="line">            e &#x3D; e * 10;</span><br><span class="line">            System.out.print(e + &quot; &quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList: [1, 2, 3, 4]</span><br><span class="line">更新 ArrayList: 10 20 30 40 </span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;java 跨包使用 &amp;amp;&amp;amp; 泛型&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://jkraise.top/categories/java/"/>
    
    
    <category term="java 跨包使用 &amp;&amp; 泛型" scheme="http://jkraise.top/tags/java-%E8%B7%A8%E5%8C%85%E4%BD%BF%E7%94%A8-%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Jvm 堆&amp;栈的理解</title>
    <link href="http://jkraise.top/2021/09/07/jvm%E5%A0%86%E6%A0%88%E7%90%86%E8%A7%A3/"/>
    <id>http://jkraise.top/2021/09/07/jvm%E5%A0%86%E6%A0%88%E7%90%86%E8%A7%A3/</id>
    <published>2021-09-07T14:27:36.000Z</published>
    <updated>2021-09-07T14:28:02.332Z</updated>
    
    <content type="html"><![CDATA[<p>Jvm 堆&amp;栈的理解</p><a id="more"></a><h2 id="Jvm-堆-amp-栈的理解"><a href="#Jvm-堆-amp-栈的理解" class="headerlink" title="Jvm 堆&amp;栈的理解"></a>Jvm 堆&amp;栈的理解</h2><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p> JVM里的“堆”（heap）特指用于存放Java对象的内存区域 </p><p><strong>要注意，这个“堆”并不是数据结构意义上的堆（<a href="https://link.zhihu.com/?target=https://en.wikipedia.org/wiki/Heap_(data_structure)">Heap (data structure)</a>，一种有序的树），而是动态内存分配意义上的堆——用于管理动态生命周期的内存区域</strong></p><p> <strong>JVM的堆被同一个JVM实例中的所有Java线程共享。它通常由某种自动内存管理机制所管理，这种机制通常叫做“垃圾回收”（garbage collection，GC）</strong> </p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p> JVM里的“栈”（ stack ）特指用于存放Java方法 ，基本类型的变量，和对象的引用变量 ，的内存区域 </p><p><strong>特点是 先进后出</strong></p><p>方法执行后，方法会从栈里出去，释放</p><p> 存取速度比堆要快，仅此于寄存器，栈数据可以共享，但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。 </p><h2 id="栈和堆的区别"><a href="#栈和堆的区别" class="headerlink" title="栈和堆的区别"></a>栈和堆的区别</h2><blockquote><p>JVM是基于堆栈的虚拟机.JVM为每个新创建的线程都分配一个堆栈.也就是说,对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以帧为单位保存线程的状态。JVM对堆栈只进行两种操作:以帧为单位的压栈和出栈操作。</p></blockquote><ul><li>差异</li></ul><blockquote><p>1.堆内存用来存放由new创建的对象和数组。<br>2.栈内存用来存放方法或者局部变量等<br>3.堆是先进先出，后进后出<br>4.栈是后进先出，先进后出</p></blockquote><ul><li>相同</li></ul><blockquote><p>1.都是属于Java内存的一种<br>2.系统都会自动去回收它，但是对于堆内存一般开发人员会自动回收它</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Jvm 堆&amp;amp;栈的理解&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://jkraise.top/categories/java/"/>
    
    
    <category term="Jvm 堆&amp;栈的理解" scheme="http://jkraise.top/tags/Jvm-%E5%A0%86-%E6%A0%88%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>MeiDuoProjectExplain</title>
    <link href="http://jkraise.top/2021/09/07/MeiDuoProjectExplain/"/>
    <id>http://jkraise.top/2021/09/07/MeiDuoProjectExplain/</id>
    <published>2021-09-07T09:56:08.000Z</published>
    <updated>2021-09-07T09:56:42.824Z</updated>
    
    <content type="html"><![CDATA[<p>MeiDuoProjectExplain<br>网站首页广告分析（这里京东做分析）</p><a id="more"></a><h3 id="网站首页广告分析（这里京东做分析）"><a href="#网站首页广告分析（这里京东做分析）" class="headerlink" title="网站首页广告分析（这里京东做分析）"></a>网站首页广告分析（这里京东做分析）</h3><h4 id="1-核心区"><a href="#1-核心区" class="headerlink" title="1.核心区"></a>1.核心区</h4><p><img src="MeiDuoProjectExplain.assets/1620994509496.png" alt="1620994509496"></p><h4 id="2-楼层"><a href="#2-楼层" class="headerlink" title="2.楼层"></a>2.楼层</h4><p><img src="MeiDuoProjectExplain.assets/1620994571806.png" alt="1620994571806"></p><p><img src="MeiDuoProjectExplain.assets/1620994592226.png" alt="1620994592226"></p><h3 id="SPU-和SKU"><a href="#SPU-和SKU" class="headerlink" title="SPU 和SKU"></a>SPU 和SKU</h3><ul><li>SPU 可以理解为一个类 ， 拥有相同属性， 相同方法， 比如 iPhone x   <ul><li>如手机-&gt;苹果手机-&gt;苹果6，苹果6就是SPU     </li></ul></li><li>SKU  可以理解为一个实例对象， 比如  iPhone x  全网通 黑色 256g  </li></ul><h3 id="Nginx部署静态"><a href="#Nginx部署静态" class="headerlink" title="Nginx部署静态"></a>Nginx部署静态</h3><ol><li><p><code>settings.py文件</code> 设置静态文件目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT &#x3D; os.path.join(os.path.dirname(os.path.dirname(BAse_DIR)), &quot;front_end_pc&#x2F;static&quot;)</span><br></pre></td></tr></table></figure></li><li><p>我们要把静态文件收集到<code>front_end_pc/static</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure></li></ol><h5 id="ubuntu-提前装好Nginx服务器"><a href="#ubuntu-提前装好Nginx服务器" class="headerlink" title="ubuntu 提前装好Nginx服务器"></a>ubuntu 提前装好Nginx服务器</h5><ul><li><p>1.配置Nginx服务器</p><p><strong>静态业务</strong></p></li></ul><p><img src="MeiDuoProjectExplain.assets/1623980357480.png" alt="1623980357480"></p><p><strong>动态业务</strong></p><p><img src="MeiDuoProjectExplain.assets/1623980721048.png" alt="1623980721048"></p><p><strong>server部分说明</strong></p><p><img src="MeiDuoProjectExplain.assets/1623982962155.png" alt="1623982962155"></p><p><strong>指定wsgi.py 启动配置文件为prod.py</strong></p><p><img src="MeiDuoProjectExplain.assets/1623986502245.png" alt="1623986502245"></p><p><strong>服务器地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keepalive_timeout  1000;</span><br><span class="line">upstream meiduo &#123;</span><br><span class="line">    server 1xx.1xx.27.77:8001;  # 此处为uwsgi运行的ip地址和端口号</span><br><span class="line">    # 如果有多台服务器，可以在此处继续添加服务器地址</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>uwsgi.ini</code>  放到  同<code>wsgi</code>同一路径下，做<code>uwsgi</code>服务器配置</p><p><strong>uwsgi.ini</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">#使用nginx连接时使用，Django程序所在服务器地址</span><br><span class="line">socket&#x3D;192.168.x.xx:8001</span><br><span class="line">#直接做web服务器使用，Django程序所在服务器地址</span><br><span class="line"># http&#x3D;1xx.168.xxx.133:8001</span><br><span class="line">#项目目录</span><br><span class="line">chdir&#x3D;&#x2F;Users&#x2F;chao&#x2F;Desktop&#x2F;meiduo&#x2F;meiduo_mall</span><br><span class="line">#项目中wsgi.py文件的目录，相对于项目目录</span><br><span class="line">wsgi-file&#x3D;meiduo_mall&#x2F;wsgi.py</span><br><span class="line"># 进程数</span><br><span class="line">processes&#x3D;4</span><br><span class="line"># 线程数</span><br><span class="line">threads&#x3D;2</span><br><span class="line"># uwsgi服务器的角色   # True 为主，False 为从</span><br><span class="line">master&#x3D;True    </span><br><span class="line"># 存放进程编号的文件</span><br><span class="line">pidfile&#x3D;uwsgi.pid</span><br><span class="line"># 日志文件，因为uwsgi可以脱离终端在后台运行，日志看不见。我们以前的runserver是依赖终端的</span><br><span class="line">daemonize&#x3D;uwsgi.log</span><br><span class="line"># 指定依赖的虚拟环境</span><br><span class="line">virtualenv&#x3D;&#x2F;Users&#x2F;chao&#x2F;.virtualenvs&#x2F;django_20</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><img src="MeiDuoProjectExplain.assets/1624165971359.png" alt="1624165971359"></p><p><strong>uwsgi 命令</strong></p><ul><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure></li><li><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --stop uwsgi.ini</span><br><span class="line"># 或者 kill</span><br></pre></td></tr></table></figure></li></ul><h2 id="美多后台"><a href="#美多后台" class="headerlink" title="美多后台"></a>美多后台</h2><h3 id="采用-drf-架构"><a href="#采用-drf-架构" class="headerlink" title="采用 drf 架构"></a>采用 drf 架构</h3><h3 id="搜索方案-gt-gt-drf-haystack"><a href="#搜索方案-gt-gt-drf-haystack" class="headerlink" title="搜索方案&gt;&gt; drf-haystack"></a>搜索方案&gt;&gt; drf-haystack</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;MeiDuoProjectExplain&lt;br&gt;网站首页广告分析（这里京东做分析）&lt;/p&gt;</summary>
    
    
    
    <category term="Django" scheme="http://jkraise.top/categories/Django/"/>
    
    <category term="web" scheme="http://jkraise.top/categories/Django/web/"/>
    
    
    <category term="MeiDuoProjectExplain" scheme="http://jkraise.top/tags/MeiDuoProjectExplain/"/>
    
    <category term="项目分析" scheme="http://jkraise.top/tags/%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>移动端 开发流程</title>
    <link href="http://jkraise.top/2021/09/07/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%80%E4%BA%9B%E6%B5%81%E7%A8%8B/"/>
    <id>http://jkraise.top/2021/09/07/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%80%E4%BA%9B%E6%B5%81%E7%A8%8B/</id>
    <published>2021-09-07T09:45:46.000Z</published>
    <updated>2021-10-20T00:38:37.637Z</updated>
    
    <content type="html"><![CDATA[<p>移动端 开发流程</p><a id="more"></a><h2 id="移动端-开发流程"><a href="#移动端-开发流程" class="headerlink" title="移动端 开发流程"></a>移动端 开发流程</h2><h4 id="蓝湖-摹客协作平台"><a href="#蓝湖-摹客协作平台" class="headerlink" title="蓝湖/摹客协作平台"></a>蓝湖/摹客协作平台</h4><ul><li><p>UI设计师 psd效果图完成后，会上传到蓝湖//摹客里面，同时会拉前端工程师进入开发</p></li><li><p>大部分情况下，UI会把图片按照前端设计要求给切好</p></li><li><p>UI设计师 上传蓝湖到或者/摹客（了解）</p></li><li><p><a href="https://www.mockplus.cn/">幕客 https://www.mockplus.cn/</a>   </p></li><li><p><a href="https://lanhuapp.com/">蓝湖  https://lanhuapp.com/</a></p></li></ul><h4 id="这里以-幕客为例"><a href="#这里以-幕客为例" class="headerlink" title="这里以 幕客为例"></a>这里以 幕客为例</h4><ol><li><p>注册账号 ， </p></li><li><p>下载ps插件</p></li><li><p>PS 安装/摹客/蓝湖插件</p></li><li><p>打开PS/摹客/蓝湖插件</p></li><li><p>上传（需要切图，需要先标注切图）</p></li><li><p>查看项目</p></li><li><p>邀请成员进入（分享按钮，链接地址）</p></li></ol><h4 id="布局策略"><a href="#布局策略" class="headerlink" title="布局策略"></a>布局策略</h4><ul><li>一般注意宽度，高度不注意</li></ul><h4 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h4><ul><li>注意： 设为flex布局以后，子元素的float，clear，vertical-align 属性将失效</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;移动端 开发流程&lt;/p&gt;</summary>
    
    
    
    <category term="移动端 开发流程" scheme="http://jkraise.top/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    
    
    <category term="移动端 开发流程" scheme="http://jkraise.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ES6语法</title>
    <link href="http://jkraise.top/2021/09/07/ES6%E8%AF%AD%E6%B3%95/"/>
    <id>http://jkraise.top/2021/09/07/ES6%E8%AF%AD%E6%B3%95/</id>
    <published>2021-09-07T09:42:13.000Z</published>
    <updated>2021-09-07T09:45:04.976Z</updated>
    
    <content type="html"><![CDATA[<p>ES6语法</p><a id="more"></a><h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建类 class  创建一个 明星类</span><br><span class="line">    class Star &#123;</span><br><span class="line">        &#x2F;&#x2F; 构造函数</span><br><span class="line">        constructor(uname)&#123;</span><br><span class="line">            this.uname &#x3D; uanem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 利用类创建对象 new</span><br><span class="line">    var ldh &#x3D; new Star(&#39;刘德华&#39;);</span><br><span class="line">    console.log(ldh.uname);</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ES6语法&lt;/p&gt;</summary>
    
    
    
    <category term="ES6语法" scheme="http://jkraise.top/categories/ES6%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="ES6语法" scheme="http://jkraise.top/tags/ES6%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>React语法</title>
    <link href="http://jkraise.top/2021/09/07/react%E8%AF%AD%E6%B3%95/"/>
    <id>http://jkraise.top/2021/09/07/react%E8%AF%AD%E6%B3%95/</id>
    <published>2021-09-07T09:06:39.000Z</published>
    <updated>2022-07-23T06:23:02.697Z</updated>
    
    <content type="html"><![CDATA[<p>React语法<br>1.声明式<br>2.基于组件<br>3.学习一次，随处使用</p><a id="more"></a><h1 id="React语法"><a href="#React语法" class="headerlink" title="React语法"></a>React语法</h1><h3 id="一，什么是react"><a href="#一，什么是react" class="headerlink" title="一，什么是react"></a>一，什么是react</h3><p><img src="https://s3-cn-south-1.qiniucs.com/myblogpicgithub/react%E8%AF%AD%E6%B3%95/1628829951055.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=CtEvv35fSPL-B38ccrW8rnSst3Q-D1dEqaclv3PV/20210907/cn-south-1/s3/aws4_request&X-Amz-Date=20210907T092812Z&X-Amz-Expires=600&X-Amz-Signature=becb7c17c168888cc431428083794c36be32433468287bf8446a05b6ab7d256f&X-Amz-SignedHeaders=host" alt="1628829951055"></p><h5 id="1-React的特点"><a href="#1-React的特点" class="headerlink" title="1. React的特点"></a>1. React的特点</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1，声明式</span><br><span class="line">2. 基于组件</span><br><span class="line">3. 学习一次，随处使用</span><br></pre></td></tr></table></figure><h3 id="二，React的使用"><a href="#二，React的使用" class="headerlink" title="二，React的使用"></a>二，React的使用</h3><h5 id="1-React的安装"><a href="#1-React的安装" class="headerlink" title="1. React的安装"></a>1. React的安装</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i react react-dom</span><br><span class="line">react 包是核心，提供创建元素，组件等功能</span><br><span class="line">React-dom包提供DOM相关功能等</span><br></pre></td></tr></table></figure>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 1. 引入js文件 --&gt;</span><br><span class="line">        &lt;script src&#x3D;&quot;.&#x2F;node_modules&#x2F;react&#x2F;umd&#x2F;react.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">        &lt;script src&#x3D;&quot;.&#x2F;node_modules&#x2F;react-dom&#x2F;umd&#x2F;react-dom.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 2 创建react元素</span><br><span class="line">    &#x2F;&#x2F; 参数一； 元素名称</span><br><span class="line">    &#x2F;&#x2F; 参数二； 元素属性</span><br><span class="line">    &#x2F;&#x2F; 参数三； 第三个及其以后的元素  元素的子节点</span><br><span class="line"></span><br><span class="line">    const title &#x3D; React.createElement(&#39;h1&#39;, null, &#39;Hello React&#39;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 3 渲染react元素</span><br><span class="line">    &#x2F;&#x2F; 参数一：要渲染的react元素</span><br><span class="line">    &#x2F;&#x2F; 参数二：挂载点</span><br><span class="line">    ReactDOM.render(title, document.getElementById(&#39;root&#39;))</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>   <strong>通常我们不使用这个方法创建react元素，比较麻烦</strong></p><h3 id="三，React脚手架的使用"><a href="#三，React脚手架的使用" class="headerlink" title="三，React脚手架的使用"></a>三，React脚手架的使用</h3><h5 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1. 初始化项目"></a>1. 初始化项目</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure><h5 id="2-启动项目"><a href="#2-启动项目" class="headerlink" title="2. 启动项目"></a>2. 启动项目</h5><p>   在项目的根目录执行命令：<code>npm start</code></p><p>   <img src="https://qny.jkraise.top/react%E8%AF%AD%E6%B3%95/1628834445909.png" alt="1628834445909"></p><p>   <strong>出现这个页面也就成功了</strong></p><h3 id="四，JSX的使用"><a href="#四，JSX的使用" class="headerlink" title="四，JSX的使用"></a>四，JSX的使用</h3><p><code>jsx</code>是<code>JavaScript XML </code>的简写，表示在JavaScript中写XML（html）格式的代码</p><h5 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1. 简单使用"></a>1. 简单使用</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const title &#x3D; &lt;h1&gt; jsx hello </span><br><span class="line">&lt;span&gt; span hello &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(title, document.getElementById(&#39;root&#39;))</span><br></pre></td></tr></table></figure><ol start="2"><li><img src="https://qny.jkraise.top/react%E8%AF%AD%E6%B3%95/1628836123360.png" alt="1628836123360"></li></ol><h5 id="3-推荐写法"><a href="#3-推荐写法" class="headerlink" title="3. 推荐写法"></a>3. 推荐写法</h5><ul><li><p>React元素的属性名使用驼峰法命名</p></li><li><p>特殊属性名：<code> class -&gt; className,   for -&gt;htmlFor, tabindex -&gt;tabIndex</code></p></li><li><p>没有子节点的React元素可以用<code>/&gt;</code>结束</p></li><li><p>使用小括号包裹jsx，避免js中的自动添加分号陷阱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const title &#x3D; (</span><br><span class="line">&lt;h1 className&#x3D;&quot;title&quot;&gt; </span><br><span class="line">jsx hello </span><br><span class="line">&lt;span&gt; span hello &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;h1&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ReactDOM.render(title, document.getElementById(&#39;root&#39;))</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-嵌入js表达式"><a href="#4-嵌入js表达式" class="headerlink" title="4. 嵌入js表达式"></a>4. 嵌入js表达式</h5><p>   语法格式：<code>&#123;js表达式&#125;</code></p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const name &#x3D; &#39;Jack&#39;</span><br><span class="line">const title &#x3D; (</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">hello jsx, &#123;name&#125;</span><br><span class="line">&lt;&#x2F;h1&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(title, document.getElementById(&#39;root&#39;))</span><br></pre></td></tr></table></figure><h5 id="5-JSX-的条件渲染"><a href="#5-JSX-的条件渲染" class="headerlink" title="5. JSX 的条件渲染"></a>5. JSX 的条件渲染</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">const isLoading &#x3D; true</span><br><span class="line">&#x2F;&#x2F; 条件渲染</span><br><span class="line">const loadData &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return isLoading ? (&lt;div&gt;loading......&lt;&#x2F;div&gt;) : (&lt;div&gt;数据加载完成，此处显示为&lt;&#x2F;div&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const title &#x3D; (</span><br><span class="line">  &lt;h1&gt;</span><br><span class="line">    加载数据：</span><br><span class="line">&#123;loadData()&#125;</span><br><span class="line">&lt;&#x2F;h1&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  title,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="6-JSX-的列表渲染"><a href="#6-JSX-的列表渲染" class="headerlink" title="6. JSX 的列表渲染"></a>6. JSX 的列表渲染</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const songs&#x3D;[</span><br><span class="line">    &#123;id：1，name:&#39;痴心绝对&#39;&#125;，</span><br><span class="line">    &#123;id：2，name:&#39;像我这样的人&#39;&#125;，</span><br><span class="line">    &#123;id：3，name:&#39;南山南&#39;&#125;，</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用列表的map方法映射</span><br><span class="line">&#x2F;&#x2F; key 与vue 中的key 是一样的 唯一性</span><br><span class="line">const list&#x3D;(</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;songs.map(item&#x3D;&gt;&lt;1i key&#x3D;&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;&#x2F;1i&gt;)&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="7-JSX的样式喧嚷"><a href="#7-JSX的样式喧嚷" class="headerlink" title="7. JSX的样式喧嚷"></a>7. JSX的样式喧嚷</h5><ul><li><p>行内式—style</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; JSX的样式处理</span><br><span class="line">const list&#x3D;（</span><br><span class="line">    &lt;h1 style&#x3D;&#123;&#123;color:&#39;red&#39;，backgroundColor:‘skyblue&#125;&#125;&gt;</span><br><span class="line">    JSX的样式处理</span><br><span class="line">    &lt;&#x2F;h1&gt;</span><br><span class="line">)</span><br><span class="line">&#x2F;&#x2F;渲染react元素</span><br><span class="line">ReactpoM.render（list，document.getElementById（&#39;root&quot;））</span><br></pre></td></tr></table></figure></li><li><p>类名 —-className</p></li></ul><h3 id="五，React-组件使用"><a href="#五，React-组件使用" class="headerlink" title="五，React 组件使用"></a>五，React 组件使用</h3><ul><li>组件是React的一等公民，使用React就是在用组件</li><li>组件表示页面中的部分功能</li><li>组合多个组件实现完整的页面功能</li><li>特点：可复用、独立、可组合</li></ul><h5 id="1-使用函数创建组件"><a href="#1-使用函数创建组件" class="headerlink" title="1. 使用函数创建组件"></a>1. <strong>使用函数创建组件</strong></h5><ol><li><p>函数名首字母大写</p></li><li><p>必须要有返回值（可以返回null）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">  函数组件</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; function Hello() &#123;</span><br><span class="line">&#x2F;&#x2F;   return(</span><br><span class="line">&#x2F;&#x2F;     &lt;div&gt;这是一个函数组件&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;   )</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 箭头函数组件</span><br><span class="line">const Hello &#x3D; () &#x3D;&gt; &lt;div&gt;这是一个函数组件&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Hello&gt;&lt;&#x2F;Hello&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h5 id="2-类组件"><a href="#2-类组件" class="headerlink" title="2. 类组件"></a>2. 类组件</h5>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 类组件 </span><br><span class="line"></span><br><span class="line">class Hello extends React.Component &#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return &lt;div&gt;这是一个类组件&lt;&#x2F;div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Hello &#x2F;&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-抽离到独立的js文件"><a href="#3-抽离到独立的js文件" class="headerlink" title="3. 抽离到独立的js文件"></a>3. 抽离到独立的js文件</h5><ul><li><p>Hello.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 独立的js文件，类组件</span><br><span class="line">class Hello extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;这是一个抽离到js文件的组件&lt;&#x2F;div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 导出组件</span><br><span class="line">export default Hello</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入组件</span><br><span class="line">import Hello from &#39;.&#x2F;Hello&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 渲染组件</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Hello &#x2F;&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="六，React-事件处理"><a href="#六，React-事件处理" class="headerlink" title="六，React 事件处理"></a>六，React 事件处理</h3><h5 id="1-事件绑定"><a href="#1-事件绑定" class="headerlink" title="1. 事件绑定"></a>1. <strong>事件绑定</strong></h5><ul><li><p>React 事件绑定语法与DOM事件语法相似</p></li><li><p>语法：<code>on+事件名称=（事件处理程序&#125;，比如：onClick=&#123;0=&gt;0&#125;</code></p></li><li><p>注意：React 事件采用驼峰命名法，比如：<code>onMouseEnter、onFocus</code></p></li><li><pre><code>// 类组件class Hello extends React.Component &#123;    // 事件处理函数    handleClick()&#123;        console.log(&#39;单击事件触发了&#39;)    &#125;    // render 必须要写，    render() &#123;        return (            &lt;button onClick=&#123;this.handleClick&#125;&gt;点击事件&lt;/button&gt;        )    &#125;&#125;export default Hello</code></pre></li></ul><pre><code> ============= ============= // 函数组件 function App1() &#123;   // 处理函数   function handleClick() &#123;     console.log(&#39;函数组件中的事件绑定，&#39;)   &#125;   // 必须有return   return (     &lt;button onClick=&#123;handleClick&#125;&gt;点我&lt;/button&gt;   ) &#125; ReactDOM.render(   &lt;App1 /&gt;,   document.getElementById(&#39;root&#39;) ) <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 2. **事件对象**</span><br><span class="line"></span><br><span class="line">   - 可以通过事件处理程序的参数获取到事件对象</span><br><span class="line"> </span><br><span class="line">   - React中的事件对象叫做：**合成事件**（对象）</span><br><span class="line"> </span><br><span class="line">   - 合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题</span><br><span class="line"> </span><br><span class="line">   - &#96;&#96;&#96;</span><br><span class="line">     function App1() &#123;</span><br><span class="line">       function handleClick(e) &#123;</span><br><span class="line">         &#x2F;&#x2F; 阻止浏览器的默认行为</span><br><span class="line">         &#x2F;&#x2F; e.preventDefault()</span><br><span class="line">             </span><br><span class="line">         console.log(&#39;a标签单击事件触发了&#39;)</span><br><span class="line">     </span><br><span class="line">       &#125;</span><br><span class="line">     </span><br><span class="line">       return (</span><br><span class="line">         &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot; onClick&#x3D;&#123;handleClick&#125;&gt;点击事件&lt;&#x2F;a&gt;</span><br><span class="line">       )</span><br><span class="line">     &#125; </span><br><span class="line">     </span><br><span class="line">     ReactDOM.render(</span><br><span class="line">           &lt;App1 &#x2F;&gt;,</span><br><span class="line">           document.getElementById(&#39;root&#39;)</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 3. **有状态组件和无状态组件**</span><br><span class="line"></span><br><span class="line">   - 函数组件又叫做无状态组件，类组件又叫做有状态组件</span><br><span class="line"> </span><br><span class="line">   - 状态（state）即数据</span><br><span class="line"> </span><br><span class="line">   - 函数组件没有自己的状态，**只负责数据展示**（静）</span><br><span class="line"> </span><br><span class="line">   - 类组件有自己的状态，**负责更新Ul**，让页面“动”起来</span><br><span class="line"> </span><br><span class="line">   - &#96;&#96;&#96;</span><br><span class="line">     &#x2F;&#x2F; 类组件</span><br><span class="line">     class Hello extends React.Component &#123;</span><br><span class="line">     </span><br><span class="line">         &#x2F;* constructor()&#123;</span><br><span class="line">             &#x2F;&#x2F; ES6 规范</span><br><span class="line">             super()</span><br><span class="line">     </span><br><span class="line">             &#x2F;&#x2F; 初始化state</span><br><span class="line">             this.state &#x3D; &#123;</span><br><span class="line">                 count: 0</span><br><span class="line">             &#125;</span><br><span class="line">     </span><br><span class="line">         &#125; *&#x2F;</span><br><span class="line">     </span><br><span class="line">         &#x2F;&#x2F; 简写语法 初始化state</span><br><span class="line">         state &#x3D; &#123;</span><br><span class="line">             count: 20</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         &#x2F;&#x2F; render 必须要写，</span><br><span class="line">         render() &#123;</span><br><span class="line">             return (</span><br><span class="line">                 &lt;div&gt;</span><br><span class="line">                     &lt;p&gt;</span><br><span class="line">                         计算器：&#123;this.state.count&#125;</span><br><span class="line">                     &lt;&#x2F;p&gt;</span><br><span class="line">                 &lt;&#x2F;div&gt;</span><br><span class="line">             )</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     export default Hello</span><br></pre></td></tr></table></figure>    - **总结**    - 状态即数据    - 状态是私有的，只能在组件内部使用    - 通过this.state来获取状态</code></pre><h5 id="4-setState-修改状态"><a href="#4-setState-修改状态" class="headerlink" title="4. setState()修改状态"></a>4. <strong>setState()修改状态</strong></h5><pre><code>  - 状态是可变的  - 语法：this.setState（&#123;要修改的数据&#125;）  - 注意：不要直接修改state中的值，这是错误的！！！  - setState0作用：**1.修改state 2.更新Ul**  - 思想：**数据驱动视图**  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">      &#x2F;&#x2F;正确</span><br><span class="line">      this.setState（&#123;</span><br><span class="line">      count:this.state.count +1</span><br><span class="line">      &#125;）</span><br><span class="line">      &#x2F;&#x2F;错误</span><br><span class="line">      this.state.count +&#x3D;1</span><br><span class="line">       </span><br><span class="line">       &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">       &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">       &#x2F;&#x2F; 简写语法 初始化state</span><br><span class="line">       state &#x3D; &#123;</span><br><span class="line">       count: 20</span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; render 必须要写，</span><br><span class="line">        render() &#123;</span><br><span class="line">            return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">            计算器：&#123;this.state.count&#125;</span><br><span class="line">            &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;button onClick&#x3D;&#123;() &#x3D;&gt;&#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">            count: this.state.count +1</span><br><span class="line">            &#125;)</span><br><span class="line">            &#125;&#125;&gt;+1&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line">​      **事件处理程序**</span><br><span class="line">​    </span><br><span class="line">​      - 原因：事件处理程序中this的值为undefined</span><br><span class="line">​      - 希望：this 指向组件实例（render方法中的this即为组件实例）</span><br><span class="line"></span><br><span class="line">   ##### 5. **事件绑定this指向**</span><br><span class="line"></span><br><span class="line">1. 箭头函数</span><br><span class="line"></span><br><span class="line">     - 利用箭头函数自身不绑定this的特点</span><br><span class="line"></span><br><span class="line">     - &#96;&#96;&#96;</span><br><span class="line">       class Hello extends React.Component&#123;</span><br><span class="line">           onIncrement() &#123;</span><br><span class="line">               console.log(&#39;this的对象&#39;,this)</span><br><span class="line">               this.setState(&#123;</span><br><span class="line">                   count: this.state.count +1</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">           render() &#123;</span><br><span class="line">           &#x2F;&#x2F;箭头函数中的this指向外部环境，此处为：render（）方法</span><br><span class="line">           return(</span><br><span class="line">           &lt;button onclick&#x3D;&#123;() &#x3D;&gt; this.onIncrement() &#125;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">           )</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></code></pre><ol start="2"><li><p><strong>Function.prototype.bind( )</strong></p><ul><li><p>利用ES5中的bind方法，将事件处理程序中的this与组件实例绑定到一起</p></li><li><pre><code>class Hello extends React.Component&#123;    constructor() &#123;        super()         // bind方法        this.onIncrement = this.onIncrement.bind(this)    &#125;    //...省略onIncrement     render() &#123;        return(            &lt;button onclick=&#123;this.onIncrement&#125;&gt;&lt;/button&gt;        )    &#125;&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. **class的实例方法**</span><br><span class="line"></span><br><span class="line">     - 利用箭头函数形式的class实例方法</span><br><span class="line"></span><br><span class="line">     - ·注意：该语法是实验性语法，但是，由于babel的存在可以直接使用</span><br><span class="line"></span><br><span class="line">     - &#96;&#96;&#96;</span><br><span class="line">       class Hello extends React.Component&#123;</span><br><span class="line">           onIncrement &#x3D; () &#x3D;&gt;&#123;</span><br><span class="line">       this.setstate(&#123;.…&#125;)</span><br><span class="line">            render() &#123;</span><br><span class="line">                return(</span><br><span class="line">                 &lt;button onclick&#x3D;&#123;this.onIncrement&#125;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">                )</span><br><span class="line">            &#125;  </span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><h3 id="七，表单处理"><a href="#七，表单处理" class="headerlink" title="七，表单处理"></a>七，表单处理</h3><h5 id="1-受控组件"><a href="#1-受控组件" class="headerlink" title="1. 受控组件"></a>1. 受控组件</h5><ul><li><p>让state与表单元素的value绑定（控制表单元素值的来源）</p></li><li><p>onChange事件函数来控制state</p></li><li><pre><code>// 简写语法 初始化state    state = &#123;        txt: &#39;请输入&#39;    &#125;    inDate = (e) =&gt; &#123;        this.setState(&#123;            txt: e.target.value        &#125;)        console.log(this.state.txt)</code></pre></li></ul><pre><code>     &#125;     // render 必须要写，     render() &#123;         return (             &lt;div&gt;                 &lt;input type=&#39;text&#39; value=&#123;this.state.txt&#125;                 onChange=&#123;this.inDate&#125;&gt;&lt;/input&gt;             &lt;/div&gt;         )     &#125; <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**多表单元素优化步骤**</span><br><span class="line"></span><br><span class="line">1. 给表单元素添加name属性，名称与state相同</span><br><span class="line"></span><br><span class="line">2. 根据表单元素类型获取对应值</span><br><span class="line"></span><br><span class="line">3. 在change 事件处理程序中通过&#96;[name]&#96;来修改对应的state</span><br><span class="line"></span><br></pre></td></tr></table></figure>    &lt;input        type=&quot;text&quot;        name=&quot;txt&quot;        value=&#123;this.state.txt&#125;        onChange=&#123;this.handleForm&#125;    /&gt;    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>    handleForm = e =&gt;&#123;        const target = e.target        //根据表单元素类型获取值type=&quot;text&quot;        const value = target.type === &#39;checkbox&#39;            ? target.checked            : target.value        //根据name设置对应state         this.setstate（&#123;            [name]：value        &#125;）    &#125;    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 2. 非受控组件</span><br><span class="line">   **使用步骤：**</span><br><span class="line">   1.调用React.createRef0方法创建一个ref对象</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>   constructor(){<br>       super()<br>       this.txtRef=React.createRef()</p><p>   }<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.将创建好的ref对象添加到文本框中</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>   &lt;input type=”text”ref={this.txtRef}/&gt;<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.通过ref 对象获取到文框的值</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>   Console.log（this.txtRef.current.value）<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   **不建议使用非受控组件**</span><br><span class="line"></span><br><span class="line">**React组建基础---总结**</span><br><span class="line"></span><br><span class="line">1.组件的两种创建方式：函数组件和类组件</span><br><span class="line"></span><br><span class="line">2.无状态（函数）组件，负责静态结构展示</span><br><span class="line"></span><br><span class="line">3.有状态（类）组件，负责更新Ul，让页面动起来</span><br><span class="line"></span><br><span class="line">4.绑定事件注意this 指向问题</span><br><span class="line"></span><br><span class="line">5.推荐使用受控组件来处理表单6.完全利用JS语言的能力创建组件，这是React的思想</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 八，组件的进阶</span><br><span class="line"></span><br><span class="line">##### 1.组建的props</span><br><span class="line"></span><br><span class="line">- 组件是封闭的，要接收外部的数据应该通过 &#96;props&#96;来实现</span><br><span class="line"></span><br><span class="line">- **props的作用：接收传递给组件的数据**</span><br><span class="line"></span><br><span class="line">- 传递数据：**给组件表亲啊添加属性**</span><br><span class="line"></span><br><span class="line">- 接收数据：函数组件通过参数 &#96;props&#96;接收数据，类组件通过 &#96;this.props&#96;接收数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  class Hello extends React.Component {</p><pre><code>// render 必须要写，render() &#123;    // 类组件中 props    console.log(this.props);    return (        &lt;div&gt;            &lt;h1&gt;props: &#123;this.props.name&#125; &lt;/h1&gt;        &lt;/div&gt;    )&#125;</code></pre><p>  }</p><p>  // 函数组件<br>  const Hello1 = props =&gt;{<br>    // props 是一个对象<br>    console.log(props);<br>    return (<br>      <div><br>          <h1>props: {this.props.name} </h1><br>      </div><br>    )<br>  }</p><p>  // 传入数据  数字类型 {数字}<br>  ReactDOM.render(<br>    <Hello name="jay" age={17}/>,<br>    document.getElementById(‘root’)<br>  )</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**特点**</span><br><span class="line"></span><br><span class="line">- 1.可以给组件传递任意类型的数据</span><br><span class="line"></span><br><span class="line">- 2.&#96;props&#96;是**只读**的对象，只能读取属性的值，无法修改对象</span><br><span class="line"></span><br><span class="line">- 3.注意：使用类组件时，如果写了构造函数，应该将 &#96;props传递给super()&#96;，否则，无法在构造函数中获取到props！</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  class Hello extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">      &#x2F;&#x2F;推荐将props传递给父类构造函数</span><br><span class="line">      super(props)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return &lt;div&gt;接收到的数据：&#123;this.props.age&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="2-Context"><a href="#2-Context" class="headerlink" title="2.Context"></a>2.<strong>Context</strong></h5><ul><li><p><strong>使用步骤</strong></p></li><li><p>1.调用<code>React.createContext()</code>创建<code>Provider</code>（提供数据）和<code>Consumer</code>（消费数据）两个组件</p></li><li><pre><code>const &#123;Provider, Consumer&#125; = React.createContext()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 2.使用Provider组件作为父节点</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  </span><br><span class="line">  &lt;Provider&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Child &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;Provider&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><p><strong>总结</strong></p></li><li><p>1.如果两个组件是远方亲戚（比如，嵌套多层）可以使用Context实现组件通讯</p></li><li><p>2.Context提供了两个组件：<code>Provider</code>和<code>Consumer</code></p></li><li><p>3.Provider组件：用来提供数据</p></li><li><p>4.Consumer组件；用来消费数据</p></li></ul><h5 id="3-Children-属性"><a href="#3-Children-属性" class="headerlink" title="3.Children 属性"></a>3.<strong>Children 属性</strong></h5><ul><li>children属性：表示组件标签的子节点。当组件标签有子节点时，props就会有该属性</li><li>children属性与普通的props一样，值可以是任意值（文本、React元素、组件，甚至是函数）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const Test &#x3D; () &#x3D;&gt; &lt;button&gt;我是button组件&lt;&#x2F;button&gt;</span><br><span class="line">const App &#x3D; props &#x3D;&gt; &#123;</span><br><span class="line">  console.log(props)</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;组件标签的子节点：&lt;&#x2F;h1&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  ReactDoM.render(</span><br><span class="line">    &lt;App&gt;</span><br><span class="line">      &#123;&#x2F;*&lt;p&gt;我是子节点，是一个p标签&lt;&#x2F;p&gt;*&#x2F;&#125;</span><br><span class="line">      &lt;Test &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;App&gt;,</span><br><span class="line">    document.getElementById(&#39;root&#39;)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h5 id="4-props校验"><a href="#4-props校验" class="headerlink" title="4.props校验"></a>4.<strong>props校验</strong></h5><ul><li><p>1.props校验：允许在创建组件的时候，就指定props的类型、格式等</p></li><li><p>作用：捕获使用组件时因为props导致的错误，给出明确的错误提示，增加组件的健壮性</p></li><li><p><strong>使用步骤</strong></p></li><li><pre><code>1. 安装包 prop-types(yarm add prop-types/npm i props-types)2. 导入prop-types包3. 使用 组件名.propTypes = &#123;&#125; 来给组件的props添加校验规则</code></pre></li></ul><p>  import PropTypes from ‘prop-types’<br>  function App (props){<br>      return (<br>          <h1>Hi, {props.colors}</h1><br>      )<br>  }</p><p>  App.propTypes = {<br>      // 约定color属性为array类型<br>      //如果类型不对，则报出明确错误，便于分析错误原因<br>      colors: PropTypes.array<br>  }<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  **约束规则**</span><br><span class="line">  1.常见类型：array、bool、func、number、object、string</span><br><span class="line">  2.React元素类型：element</span><br><span class="line"></span><br><span class="line">##### 5.**props默认值**</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>// props默认值</p><p>const App = props =&gt; {<br>  console.log(props)<br>  return (<br>    <div><br>      <h1>此处展示props的默认值：{props.pagesize}</h1><br>    </div></p><p>  )</p><p>}<br>//添加props默认值<br>App.defaultProps = {<br>  pagesize: 10<br>}</p><p>ReactpoM.render(&lt;App pagesize = { 20} /&gt;, document.getElementById(“root”))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 6.**组件的生命周期**</span><br><span class="line"></span><br><span class="line">- 1.只有类组件，才有生命周期</span><br><span class="line">- ![1629273127735](https:&#x2F;&#x2F;qny.jkraise.top&#x2F;react%E8%AF%AD%E6%B3%95&#x2F;%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)</span><br><span class="line">- ![1629273213844](https:&#x2F;&#x2F;qny.jkraise.top&#x2F;react%E8%AF%AD%E6%B3%95&#x2F;%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.png)</span><br><span class="line">- ![1629274083162](https:&#x2F;&#x2F;qny.jkraise.top&#x2F;react%E8%AF%AD%E6%B3%95&#x2F;%E4%B8%89%E7%A7%8D%E6%97%B6%E6%9C%BA.png)</span><br><span class="line"></span><br><span class="line">##### 7.**render props 模式**</span><br><span class="line"></span><br><span class="line">- **使用步骤**</span><br><span class="line"></span><br><span class="line">- 1.创建Mouse组件，在组件中提供复用的状态逻辑代码（1.状态2.操作状态的方法）</span><br><span class="line"></span><br><span class="line">- 2.将要复用的状态作为&#96;props.render（state）&#96;方法的参数，暴露到组件外部</span><br><span class="line"></span><br><span class="line">- 3.使用&#96;props.render()&#96;的返回值作为要渲染的内容</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  class Mouse extends React.Component{<br>      //.省略state和操作state的方法<br>      render(){<br>          return this.props.render(this.state)<br>  }</p><p>  &lt;Mouse render={(mouse) =&gt; <p>鼠标当前位置{mouse.x}，{mouse.y}</p>}/&gt;<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">##### 8.高阶组件</span><br><span class="line"></span><br><span class="line">**使用步骤**</span><br><span class="line"></span><br><span class="line">1.创建一个函数，名称约定以&#96;with&#96;开头</span><br><span class="line">2.指定函数参数，参数应该以大写字母开头（作为要渲染的组件）</span><br><span class="line"></span><br><span class="line">3.在函数内部创建一个类组件，**提供复用的状态逻辑代码，并返回**</span><br><span class="line">4.在该组件中，渲染参数组件，同时将状态通过prop传递给参数组件</span><br><span class="line"></span><br><span class="line">5.调用该高阶组件，传入要增强的组件，通过返回值拿到增强后的组件，并将其渲染到页面中</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>// 创建高阶组件</p><p>function withMouse(WrappedComponent) {<br>  // 该组件提供复用的状态逻辑<br>  class Mouse extends React.Component {<br>    // 鼠标状态<br>    state ={<br>      x:0.<br>      y:0<br>    }</p><pre><code>handleMouseMove = e =&gt;&#123;  this.setState(&#123;    x: e.clientX,    y: e.clientY  &#125;)&#125;// 控制鼠标状态的逻辑componentDidMount()&#123;  window.addEentListener(&#39;mousemove&#39;,this.handleMouseMove)&#125;componentwi11unmount()&#123;  window.removeEventListener(&#39;mousemove&#39;,this.handleMouseMove)&#125;render() &#123;  return &lt;WrappedComponent &#123;...this.state&#125; /&gt;&#125;</code></pre><p>  }<br>  return Mouse<br>}</p><p>//创建组件<br>const MousePosition=withMouse（Position）<br>//渲染组件<br><MousePosition/></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**解决使用高阶组件，同名问题  设置display Name**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  // 设置displayName<br>  Mouse.displayName = <code>WithMouse$&#123;getDisplayNmae(WrappedComponent)&#125;</code></p><p>  return Mouse<br>}</p><p>function getDisplayNmae(WrappedComponent) {<br>  return WrappedComponent.displayName || WrappedComponent.name || ‘Component’<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**传递props**</span><br><span class="line"></span><br><span class="line">- 解决方式：渲染&#96;WrappedComponent&#96;时，将&#96;this.state,this.props&#96;一起传递给组件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>render() {<br>      return &lt;WrappedComponent {…this.state} {…this.props} /&gt;<br>    }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 九，React原理</span><br><span class="line"></span><br><span class="line">##### 1. setState（）是异步的</span><br><span class="line"></span><br><span class="line">- &#96;setState()&#96;是异步更新的</span><br><span class="line"></span><br><span class="line">- 注意：使用该语法时，后面的&#96;setState（）&#96;不要依赖于前面的&#96;setState（）&#96;</span><br><span class="line"></span><br><span class="line">- 可以多次调用&#96;setState（）&#96;只会触发一次&#96;render()&#96;重新渲染，这是为了性能提升</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  handleclick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;此处，更新state</span><br><span class="line">    this.setstate(&#123;</span><br><span class="line">      count: this.state.count + 1&#x2F;&#x2F;1+1</span><br><span class="line">    &#125;)</span><br><span class="line">  </span><br><span class="line">    this.setstate(&#123;</span><br><span class="line">      count: this.state.count + 1&#x2F;&#x2F;1+1</span><br><span class="line">    &#125;)</span><br><span class="line">  </span><br><span class="line">    console.log(&#39;count:&#39;, this.state.count) &#x2F;&#x2F;1</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>推荐语法</strong></p></li><li><p>推荐：使用<code>setState((state,props) =&gt; &#123;&#125;)</code></p></li><li><p>参数state：表示最新的state</p></li><li><p>参数props：表示最新的props</p></li><li><pre><code>handleclick = () =&amp;gt; &#123;  //此处，更新state  // 注意：这种语法也是异步更新的  this.setState((state, props) =&amp;gt; &#123;    return &#123;      count: state.count + 1    &#125;  &#125;)  console.log(&amp;#39;count:&amp;#39;, this.state.count) //1&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **1.3第二个参数**</span><br><span class="line"></span><br><span class="line">- 场景：在状态更新（页面完成重新渲染）后立即执行某个操作</span><br><span class="line"></span><br><span class="line">- 语法：&#96;setState（updaterLcallback]）&#96;</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  this.setstate(</span><br><span class="line">    (state, props) &#x3D;&gt; &#123;&#125;,</span><br><span class="line">    () &#x3D;&gt; &#123;console.log(&#39;这个回调函数会在状态更新后立即执行&#39;)&#125;</span><br><span class="line">  </span><br><span class="line">  )</span><br></pre></td></tr></table></figure></code></pre></li></ul><h5 id="2-组件更新机制"><a href="#2-组件更新机制" class="headerlink" title="2.组件更新机制"></a>2.组件更新机制</h5><ul><li><code>setState（）</code>的两个作用：1.修改state 2，更新组件（UI）</li><li>过程：父组件重新渲染时，也会重新渲染子组件，但只会渲染<strong>当前组件子树</strong>（当前组件及其所有子组件0</li></ul><p><img src="https://qny.jkraise.top/react%E8%AF%AD%E6%B3%95/%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6.png" alt="1629345057771"></p><h5 id="3-组件的性能优化"><a href="#3-组件的性能优化" class="headerlink" title="3.组件的性能优化"></a>3.组件的性能优化</h5><ul><li><p>state 不要存储与渲染无关的数据</p></li><li><p>避免不必要的重新渲染</p><ul><li><p>解决方式：使用钩子函数 <code>shouldComponentUpdate(nextProps，nextState)</code></p></li><li><p>作用：通过返回值决定该组件是否重新渲染，返回true表示重新渲染，false表示不重新渲染</p></li><li><p>触发时机：更新阶段的钩子函数，组件重新渲染前执行<code>(shouldComponentUpdate→render)</code></p></li><li><pre><code>class Hello extends Component &#123;  shouldComponentUpdate()&#123;    //根据条件，决定是否重新渲染组件    return false   &#125;  render()&#123;...&#125;&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 4.纯组件</span><br><span class="line"></span><br><span class="line">- 说明：纯组件的内部对比是&#96;shallow compare&#96;（浅层对比）</span><br><span class="line"></span><br><span class="line">- 对于引用类型来说：只比较对象的引用（地址）是否相同</span><br><span class="line"></span><br><span class="line">- 注意：**state或props中的属性值为引用类型时，应该创建新数据，不要直接修改源数据**</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  &#x2F;&#x2F;正确！创建新数据</span><br><span class="line">  const newobj &#x3D; &#123; ...state.obj，number：2&#125;</span><br><span class="line">  setstate(&#123; obj: newobj &#125;)</span><br><span class="line">  &#x2F;&#x2F;正确！创建新数据</span><br><span class="line">  &#x2F;&#x2F;不要用数组的push&#x2F;unshift等直接修改当前数组的的方法</span><br><span class="line">  &#x2F;&#x2F;而应该用concat或slice等这些返回新数组的方法</span><br><span class="line">  this.setstate(&#123;</span><br><span class="line">    list: [...this.state.list，&#123; 新数据 &#125;]</span><br><span class="line">  </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h5 id="5-虚拟DOM，diff算法"><a href="#5-虚拟DOM，diff算法" class="headerlink" title="5.虚拟DOM，diff算法"></a>5.虚拟DOM，diff算法</h5><p><img src="https://qny.jkraise.top/react%E8%AF%AD%E6%B3%95/diff%E7%AE%97%E6%B3%95.png" alt="1629537596479"></p><h5 id="6-React-原理揭秘"><a href="#6-React-原理揭秘" class="headerlink" title="6.React 原理揭秘"></a>6.React 原理揭秘</h5><p>1.工作角度：应用第一，原理第二。<br>2.原理有助于更好地理解 React的自身运行机制。<br>3.setState0异步更新数据。<br>4.父组件更新导致子组件更新，纯组件提升性能。<br>5.思路清晰简单为前提，虚拟DOM和Dif保效率。<br>6.虚拟DOM&gt;state+JSX。<br>7.虚拟DOM的真正价值从来都不是性能。</p><h3 id="十，路由的基本使用"><a href="#十，路由的基本使用" class="headerlink" title="十，路由的基本使用"></a>十，路由的基本使用</h3><h5 id="1-安装-npm-i-react-router-dom"><a href="#1-安装-npm-i-react-router-dom" class="headerlink" title="1.安装 npm i  react-router-dom"></a>1.安装 <code>npm i  react-router-dom</code></h5><p>2.导入路由 组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;BrowserRouter as Router, Route, Link&#125; from &#39;react-router-dom&#39;</span><br></pre></td></tr></table></figure><p>3.使用Router组件包裹整个应用（重要）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;div className&#x3D;&quot;App&quot;&gt;</span><br><span class="line">    &#x2F;&#x2F; ...省略页面内容</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;Router&gt;</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><ul><li>path 会与pathname 匹配</li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserRouter as Router,Route,Link &#125; from &#39;react-router-dom&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const First &#x3D;() &#x3D;&gt; &lt;p&gt;页面一的内容&lt;&#x2F;p&gt;</span><br><span class="line">&#x2F;&#x2F;3使用Router组件包裹整个应用</span><br><span class="line">const App1 &#x3D; () &#x3D;&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;React路由基础&lt;&#x2F;h1&gt;</span><br><span class="line">      &#123;&#x2F;*4指定路由入口*&#x2F;&#125;</span><br><span class="line">      &lt;Link to&#x3D;&quot;&#x2F;first&quot;&gt;页面一&lt;&#x2F;Link&gt;</span><br><span class="line">      &#123;&#x2F;*5脂定路由出口*&#x2F;&#125;I</span><br><span class="line">      &lt;Route path&#x3D;&quot;&#x2F;first&quot; component&#x3D;&#123;First&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;Router&gt;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-路由的执行过程"><a href="#2-路由的执行过程" class="headerlink" title="2.路由的执行过程"></a>2.路由的执行过程</h5><ol><li><p>点击Link 组件（a标签），修改了浏览器地址栏中的url。</p></li><li><p>React 路由监听到地址栏url的变化。</p></li><li><p>React 路由内部遍历所有 Route组件，使用路由规则（path）与pathname进行匹配。</p></li><li><p>当路由规则（path）能够匹配地址栏中的pathname时，就展示该Route组件的内容。</p></li><li><p>添加 <code>exact</code> 属性 精确匹配 只有当<code>path和pathname</code> 完全匹配才会展示该路由</p></li><li><pre><code>      // 此时，该组件只能匹配 pathname=&quot;/first&quot; 这种情况      &lt;Route exact path=&quot;/first&quot; component=&#123;First&#125; /&gt;</code></pre></li><li><p>React路由的一切都是组件，可以像思考组件一样思考路由</p></li></ol><ol><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;React语法&lt;br&gt;1.声明式&lt;br&gt;2.基于组件&lt;br&gt;3.学习一次，随处使用&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://jkraise.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="http://jkraise.top/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="React语法" scheme="http://jkraise.top/tags/React%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vue 过滤器</title>
    <link href="http://jkraise.top/2021/09/07/vue%E5%AE%8C%E6%95%B4/"/>
    <id>http://jkraise.top/2021/09/07/vue%E5%AE%8C%E6%95%B4/</id>
    <published>2021-09-07T09:06:39.000Z</published>
    <updated>2022-07-23T06:25:21.241Z</updated>
    
    <content type="html"><![CDATA[<p>vue 过滤器<br>css 盒子大小的计算方式<br>img标签，br标签 不能使用after before</p><a id="more"></a><h3 id="vue-过滤器"><a href="#vue-过滤器" class="headerlink" title="vue 过滤器"></a>vue 过滤器</h3><ul><li>Vue3 没有过滤器</li><li>Vue2 才有过滤器</li><li></li></ul><h4 id="css-盒子大小的计算方式"><a href="#css-盒子大小的计算方式" class="headerlink" title="css 盒子大小的计算方式"></a>css 盒子大小的计算方式</h4><ul><li>盒子的宽度=padding + border + 可变的内容的宽度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">border-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="img标签，br标签-不能使用after-before"><a href="#img标签，br标签-不能使用after-before" class="headerlink" title="img标签，br标签 不能使用after before"></a>img标签，br标签 不能使用after before</h4><h4 id="字体图标的特性"><a href="#字体图标的特性" class="headerlink" title="字体图标的特性"></a>字体图标的特性</h4><ul><li>字体图标 放大后不会模糊</li><li>通过font-size 控制大小</li><li>一般是纯色</li></ul><h4 id="文字溢出，出现省略号"><a href="#文字溢出，出现省略号" class="headerlink" title="文字溢出，出现省略号"></a>文字溢出，出现省略号</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*强制文字一行显示*/</span><br><span class="line">white-space: nowarp; </span><br><span class="line">/* 超出部分*/</span><br><span class="line">overflow: hidden;</span><br><span class="line">/*ellipsis  省略号*/</span><br><span class="line">text-overflow: ellipsis</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AttributeError:“sqlalchemy.cimmutabledict。mutabledict’ object . object has no attribute[puthonetoutiao-web hmtt1s</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue 过滤器&lt;br&gt;css 盒子大小的计算方式&lt;br&gt;img标签，br标签 不能使用after before&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="http://jkraise.top/categories/vue/"/>
    
    <category term="前端" scheme="http://jkraise.top/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://jkraise.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="http://jkraise.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>好客租房-React-移动web项目</title>
    <link href="http://jkraise.top/2021/09/07/%E5%A5%BD%E5%AE%A2%E7%A7%9F%E6%88%BFReact-%E7%A7%BB%E5%8A%A8web/"/>
    <id>http://jkraise.top/2021/09/07/%E5%A5%BD%E5%AE%A2%E7%A7%9F%E6%88%BFReact-%E7%A7%BB%E5%8A%A8web/</id>
    <published>2021-09-07T09:00:19.000Z</published>
    <updated>2021-09-07T09:04:40.139Z</updated>
    
    <content type="html"><![CDATA[<p>好客租房-React-移动web项目<br>React 核心库：react、react-dom、react-router-dom</p><a id="more"></a><h2 id="好客租房-React-移动web项目"><a href="#好客租房-React-移动web项目" class="headerlink" title="好客租房-React-移动web项目"></a>好客租房-React-移动web项目</h2><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a><strong>技术栈</strong></h4><ul><li>React 核心库：react、react-dom、react-router-dom</li><li>脚手架：create-react-app</li><li>·数据请求：axios<br>·Ul组件库：antd-mobile</li><li>·其他组件库：react-virtualized、formik+yup、react-spring等</li><li>·百度地图API</li></ul><h4 id="组件库-antd-mobile"><a href="#组件库-antd-mobile" class="headerlink" title="组件库 antd-mobile"></a>组件库 antd-mobile</h4><h5 id="1-打开-antd-mobile的文档"><a href="#1-打开-antd-mobile的文档" class="headerlink" title="1.打开 antd-mobile的文档"></a>1.打开 antd-mobile的<a href="https://mobile.ant.design/docs/react/introduce-cn">文档</a></h5><h5 id="2-安装-npm-i-antd-mobile"><a href="#2-安装-npm-i-antd-mobile" class="headerlink" title="2.安装 npm i antd-mobile"></a>2.安装 <code>npm i antd-mobile</code></h5><h4 id="2-2嵌套路由"><a href="#2-2嵌套路由" class="headerlink" title="2.2嵌套路由"></a>2.2嵌套路由</h4><p>使用步骤</p><h5 id="1-在pages文件夹中创建News-index-js组件"><a href="#1-在pages文件夹中创建News-index-js组件" class="headerlink" title="1.在pages文件夹中创建News/index.js组件"></a>1.在pages文件夹中创建News/index.js组件</h5><h5 id="2-在Home组件中，添加一个Route作为子路由（嵌套的路由）的出口"><a href="#2-在Home组件中，添加一个Route作为子路由（嵌套的路由）的出口" class="headerlink" title="2.在Home组件中，添加一个Route作为子路由（嵌套的路由）的出口"></a>2.在Home组件中，添加一个Route作为子路由（嵌套的路由）的出口</h5><h5 id="3-设置嵌套路由的path，格式以父路由path-开头（父组件展示，子组件才会展示）"><a href="#3-设置嵌套路由的path，格式以父路由path-开头（父组件展示，子组件才会展示）" class="headerlink" title="3.设置嵌套路由的path，格式以父路由path 开头（父组件展示，子组件才会展示）"></a>3.设置嵌套路由的<code>path</code>，格式以父路由<code>path 开头</code>（父组件展示，子组件才会展示）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;Router&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Home &#x3D; () &#x3D;&gt;&#123;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Route path&#x3D;&quot;&#x2F;home&#x2F;news&quot; component&#x3D;&#123;News&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="install-axios-请求"><a href="#install-axios-请求" class="headerlink" title="install axios 请求"></a>install axios 请求</h4><p><code>npm i axios    </code></p><h4 id="使用Sass-在脚手架中"><a href="#使用Sass-在脚手架中" class="headerlink" title="使用Sass 在脚手架中"></a>使用Sass 在脚手架中</h4><p><strong>步骤</strong><br>①打开脚手架的文档，找到添加Sass样式<br>②安装Sass:  <code>yarn add node-sass</code><br>③创建后缀名称为<code>.scss或.sass</code>的样式文件<br>④在组件中导入Sass群式文件</p><h4 id="百度地图api"><a href="#百度地图api" class="headerlink" title="百度地图api"></a>百度地图api</h4><p>3.使用步骤<br>①引入百度地图API的JS文件，替换自己申请好的密钥。</p><script src="http://api.map.baidu.com/api？v=3.0sak=您的密钥"></script><h4 id="react-virtualized-组件"><a href="#react-virtualized-组件" class="headerlink" title="react-virtualized 组件"></a>react-virtualized 组件</h4><p>搭配 AutoSize 高阶组件</p><h4 id="组件间样式覆盖问题"><a href="#组件间样式覆盖问题" class="headerlink" title="组件间样式覆盖问题"></a>组件间样式覆盖问题</h4><p><strong>2.CSS IN JS</strong></p><ul><li><p>CSS IN JS：是使用JavaScript编写CSS的统称，用来解决CSS样式冲突、覆盖等问题</p></li><li><p>CSS IN JS的具体实现有50多种，比如：<code>CSS Modules、styled-components</code>等</p></li><li><p>推荐使用：CSS Modules（React脚手架已集成，可直接使用）<a href="https://github.com/css-modules/css-">https://github.com/css-modules/css-</a></p></li></ul><p><strong>3.CSS Modules的说明</strong></p><ul><li><p>CSS Modules通过对CSS类名重命名，保证每个类名的唯一性，从而避免样式冲突的问题</p></li><li><p>·换句话说：所有类名都具有“局部作用域”，只在当前组件内部生效</p></li><li><p>·实现方式：<code>webpack的css-loader</code> 插件</p></li><li><p>命名采用：BEM（Block块，Element元素，Modifier三部分组成）命名规范：比如 <code>.list_item_active</code></p></li><li><p>在React 脚手架中演化成：文件名、类名、hash（随机）三部分，只需要指定类名即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*自动生成的类名，我们只需要提供classname即可*&#x2F;</span><br><span class="line">[filename]_[classname]__[hash]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;类名</span><br><span class="line">.error&#123;&#125;</span><br><span class="line">&#x2F;&#x2F;生成的类名为：</span><br><span class="line">.Button_error__ax7yz</span><br></pre></td></tr></table></figure></li></ul><p><strong>4.CSS Modules 在项目中的使用</strong><br>1.创建名为[name].module.css的样式文件（React脚手架中的约定，与普通CSS作区分）心</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在CityList组件中创建的样式文件名称：</span><br><span class="line">index.module.css</span><br></pre></td></tr></table></figure><p>2.组件中导入该样式文件（注意语法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在cityList组件中导入样式文件：</span><br><span class="line">import styles from&#39;.&#x2F;index.module.css&#39;</span><br></pre></td></tr></table></figure><p>3.通过styles对象访问对象中的样式名来设置样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className&#x3D;&#123;styles.test&#125;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好客租房-React-移动web项目&lt;br&gt;React 核心库：react、react-dom、react-router-dom&lt;/p&gt;</summary>
    
    
    
    <category term="移动web项目" scheme="http://jkraise.top/categories/%E7%A7%BB%E5%8A%A8web%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="React" scheme="http://jkraise.top/categories/%E7%A7%BB%E5%8A%A8web%E9%A1%B9%E7%9B%AE/React/"/>
    
    
    <category term="移动web项目" scheme="http://jkraise.top/tags/%E7%A7%BB%E5%8A%A8web%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="React" scheme="http://jkraise.top/tags/React/"/>
    
    <category term="好客租房-React" scheme="http://jkraise.top/tags/%E5%A5%BD%E5%AE%A2%E7%A7%9F%E6%88%BF-React/"/>
    
  </entry>
  
  <entry>
    <title>前端工程化 &amp;&amp; vue3.0</title>
    <link href="http://jkraise.top/2021/09/07/vue3.0/"/>
    <id>http://jkraise.top/2021/09/07/vue3.0/</id>
    <published>2021-09-07T08:51:14.000Z</published>
    <updated>2021-12-01T01:16:01.151Z</updated>
    
    <content type="html"><![CDATA[<p>前端工程化 &amp;&amp; vue3.0</p><a id="more"></a><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><h4 id="实际的前端开发："><a href="#实际的前端开发：" class="headerlink" title="实际的前端开发："></a>实际的前端开发：</h4><ul><li>模块化|（js的模块化、Css的模块化、资源的模块化）</li><li>组件化（复用现有的UI结构、样式、行为）</li><li>规范化（目录结构的划分、编码规范化、接口规范化、文档规范化、Git分支管理）</li><li>自动化（自动化构建、自动部署、自动化测试）</li></ul><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><p><strong>主要功能</strong>：它提供了友好的<strong>前端模块化开发</strong>支持，以及<strong>代码压缩混淆、处理浏览器端JavaScript的兼容性、性能优化</strong>等强大的功能。</p><h5 id="3-在项目中安装-webpack"><a href="#3-在项目中安装-webpack" class="headerlink" title="3.在项目中安装 webpack"></a>3.在项目中安装 webpack</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在终端运行如下的命令，安装webpack相关的两个包：</span><br><span class="line">npm install webpack@5.42.1 webpack-cli@4.7.2-save-dev</span><br><span class="line"></span><br><span class="line">-S 是--save的简写</span><br><span class="line">-D 是--save-dev的简写</span><br></pre></td></tr></table></figure><h5 id="4-在项目中配置-webpack"><a href="#4-在项目中配置-webpack" class="headerlink" title="4.在项目中配置 webpack"></a>4.在项目中配置 webpack</h5><ul><li><p>在项目根目录中，创建名为<code>webpack.config.js</code>的webpack配置文件， 并初始化如下的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">mode:&#39;development&#39;  &#x2F;&#x2F;mode用来指定构建模式。可选值有 development和production</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 package.json 的 scripts节点下，新增<code>dev</code>脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;：&#123;</span><br><span class="line">“dev&quot;：&quot;webpack&quot;&#x2F;&#x2F;script 节点下的脚本，可以通过npm run执行。例如npm run dev</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在终端中运行 <code>npm run dev</code>  命令：启动webpack进行项目的打包构建</p></li></ul><h2 id="vue3-0-项目"><a href="#vue3-0-项目" class="headerlink" title="vue3.0  项目"></a>vue3.0  项目</h2><h3 id="一，前端项目初始化步骤"><a href="#一，前端项目初始化步骤" class="headerlink" title="一，前端项目初始化步骤"></a>一，前端项目初始化步骤</h3><p>①  安装Vue脚手架<br>②  通过vue脚手架创建项目<br>③  配置vue路由<br>④  配置E1ement-UI组件库<br>⑤  配置axios库<br>⑥  初始化git 远程仓库<br>⑦  将本地项目托管到Github或码云中</p><ul><li><p>install vue 脚手架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vue&#x2F;cli -g</span><br></pre></td></tr></table></figure></li><li><p>使用 可视化创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br><span class="line">🚀  Starting GUI...</span><br><span class="line">🌠  Ready on http:&#x2F;&#x2F;localhost:8000</span><br></pre></td></tr></table></figure><ul><li><p>使用命令行创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">###模板下载好后的交互选项</span><br><span class="line">1.Project name vue-demo # 项目名称，直接回车，按照括号中默认名字</span><br><span class="line">（注意这里的名字不能有大写字母，如果有会报错Sorry, name can no longer contain capital letters）</span><br><span class="line">2. Project description A Vue.js project # 项目描述,直接回车</span><br><span class="line">3. Author # 作者名称，默认直接回车</span><br><span class="line">4. Vue build standalone # 一般选择的Standalone(运行时 + 编译器)模式</span><br><span class="line">    Runtime + Compiler: recommended for most users；</span><br><span class="line">Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) </span><br><span class="line">areONLY allowed in .vue files - render functions arerequired elsewhere</span><br><span class="line">（一般都选这个Runtime + Compiler: recommended for most users）</span><br><span class="line">5. Install vue-router? Yes # 是否需要 vue-router，路由，一般都需要，输入y敲回车</span><br><span class="line">6.Use ESLint to lint your code? Yes # 是否使用 ESLint 作为代码规范.</span><br><span class="line">7. Pick an ESLint preset Standard # 一样的ESlint 相关</span><br><span class="line">8. Set up unit tests Yes # 是否安装单元测试</span><br><span class="line">9. Pick a test runner 按需选择 # 测试模块</span><br><span class="line">10. Setup e2e tests with Nightwatch? 安装选择 # e2e 测试</span><br><span class="line">11. Should we run &#96;npm install&#96; for you after the project has been created? (recommended) npm # </span><br><span class="line">包管理器，一般用NPM</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="版本bug"><a href="#版本bug" class="headerlink" title="版本bug"></a>版本bug</h3><h4 id="vue-2-0"><a href="#vue-2-0" class="headerlink" title="vue 2.0"></a>vue 2.0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server@2.9.1</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="生成环境-build"><a href="#生成环境-build" class="headerlink" title="生成环境-build"></a>生成环境-build</h4><p>有个插件能够移出项目中的所有 <code>log打印</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform-remove-consol  </span><br></pre></td></tr></table></figure><h5 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h5><p><strong>通过externals 加载外部cdn资源</strong></p><p>默认情况下，通过import 语法导入的第三方资源包，最终会被打包合并到同一个文件中，从而导致打包成功后，单文件体积过大的问题。</p><p>为了解决上述问题，可以通过webpack的externals节点，来配置加载外部的cdn资源，凡是声明在externals中的第三方依赖包，都不会被打包</p><h4 id="使用pm2-管理应用"><a href="#使用pm2-管理应用" class="headerlink" title="使用pm2 管理应用"></a>使用pm2 管理应用</h4><ol><li>在服务器中安装pm2： <code>npm i pm2 -g</code></li><li>启动项目： <code>pm2 start 脚本 --name 自定义名称</code></li><li>查看运行项目： <code>pm2 ls</code></li><li>重启项目： <code>pm2 restart 自定义名称</code></li><li>停止项目：<code>pm2 stop 自定义名称</code></li><li>删除项目： <code>pm2 delete 自定义名称</code> </li></ol><p>应用组件</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前端工程化 &amp;amp;&amp;amp; vue3.0&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://jkraise.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="http://jkraise.top/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
    <category term="前端工程化" scheme="http://jkraise.top/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    <category term="vue3.0" scheme="http://jkraise.top/tags/vue3-0/"/>
    
    <category term="webpack" scheme="http://jkraise.top/tags/webpack/"/>
    
  </entry>
  
</feed>
